Docker
CentOS7安装docker
	安装依赖：yum install -y yum-utils device-mapper-persistent-data lvm2
	添加yum软件源：yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/
		linux/centos/docker-ce.repo
	安装： yum install docker
配置阿里云镜像：
	sudo mkdir -p /etc/docker
	sudo tee /etc/docker/daemon.json <<-'EOF'
	{"registry-mirrors": ["https://t08z2hog.mirror.aliyuncs.com"]}
	EOF
	sudo systemctl daemon-reload
	sudo systemctl restart docker
启动：
	systemctl start docker
开机启动：
	systemctl enable docker
建立docker用户组：
	groupadd docker
用户加入docker组：
	usermod -aG docker 用户名
下载镜像：
	docker pull  name/tag
存储路径：
	pull下来的镜像具体保存路径为/var/lib/docker
本地文件导入镜像：
	cat 镜像.tar.gz | docker import - name:version
镜像存为本地文件：
	docker save -o 镜像.tar..gz
载入镜像：（从导出的本地文件中再导入本地镜像库）
	docker load < 镜像.tar..gz
—————————————————————————————————————————————————————————————————————
docker安装webspoon
下载镜像：
docker pull hiromuhota/webspoon:0.8.2.19
运行：
sudo docker run -d -p 8080:8080  -v /home/tpss/docker_images/kettle:/home/tomcat/.kettle -v/home/tpss/docker_images/kettledata:/home/tomcat/kettledata -v /etc/localtime:/etc/localtime  -v /home/tpss/mysql-connector-java-5.1.34.jar:/usr/local/tomcat/lib/mysql-connector-java-5.1.34.jar  hiromuhota/webspoon:0.8.2.19
查看镜像：sudo docker ps
登录管理镜像：sudo docker exec -it 镜像ID /bin/bash
停止镜像：sudo docker stop 镜像ID
查看日志:   sudo docker logs -f 镜像ID
访问地址：172.16.22.198:8080/spoon
————————————————————————————————————————————————————————————————————————————————————————————————————————
显示镜像：
	docker images或者 docker image ls
	只显示id :docker image ls -q
	按格式显示：例：docker image ls --format "{{.ID}}:{{.Repositry}}"
查看容器：
	docker ps [-a]所有容器 [-s]运行中的容器
虚悬镜像：
	新旧镜像同名，旧镜像名称被取消，出现仓库名，标签都为<none>的现象
	显示：docker image ls -f dangling=true
	删除：docker image prune
使用镜像启动容器：
	//可选参数：-i 让容器标准输入保持打开 -t 分配一个为终端 --rm退出容器时删除容器
	docker run -i -t --rm ubuntu/latest /bin/bash
修改后保存：
	#主要用于保存现场，定制镜像应该使用Dockerfile
	docker commit -m "注释" -a "更新的用户信息" id ckname/tag
Untagged和Deleted:
	一个镜像可以对应多个标签，删除一个标签时Untagged
	删除最后一个标签时，触发删除操作，彻底删除镜像Deleted
Dockerfile:#最多127层#可存任何地方任何名字 用-f 绝对路径指定
	FROM：
		指定基础镜像 # FROM scratch（为虚拟镜像） 表示没有基础镜像
	MAINTAINER ：
		后加 name mailbox 指明作者和邮箱
	ENV ：
		ENV <key><value> 指定环境变量
	RUN ：	
		后边的指令会在创建时运行 #可以使用&&接n个指令#每个RUN都是一层容器
	ADD ：
		复制文件到镜像#绝对路径|相对Dockerfile路径|url|tar文件
	COPY ：
		COPY [--chown=<user>:<group>] a b 		#复制上下文目录中的文件a到镜像中b，自动解压
		COPY [--chown=<user>:<group>] ["a","b"]	#仅复制，无解压等功能
	VOLUME ：
		VOLUME ["/data"] 创建挂载点#也可以在运行时用mydata:/data覆盖，即mydata命名卷覆盖/data
	USER ：
		指定容器运行时的用户名或UID 后续RUN也会使用指定用户
	EXPOSE ：
		向外部开放端口，允许外部或其他容器访问 
		不同:
			EXPOSE port 并不实际映射端口
			而-P随机映射 -p <宿主端口>:<容器端口>可指定映射端口
	WORKDIR ：
		为后续的RUN CMD ENTRYPOINT 指定配置工作目录
	ENTRYPOINT(#入口点) ：
		配置容器启动后执行的命令 #最后一条有效，运行时加--entrypoint替代
		ENTRYPOINT "<CMD>" #都指定时具体运行指令
	CMD ：
		shell格式:CMD<命令> 指定容器启动后运行的命令#只有最后一条有效
		#exec格式：CMD ["可执行文件","参数"...]     #运行时指令可直接替代
		#参数列表格式：CMD ["参数1","参数2",...]	#若存在ENTRYPOINT 则为其指定具体的参数，运行时不覆盖
	ARG ：
		<参数名>[=默认值] 构建参数 #构建环境的环境变量，容器运行时不存在
		#可用--build-arg替换ARG已定义的构建环境的环境变量
	HEALTHCHECK：
		健康检查#最后一个有效#--interval=间隔，--timeout=时长，--retries=次数
		#HEALTHCHECK [选项]CMD<命令> 设置检查容器健康状况的命令
		#HEALTHCHECK NONE 如果基础镜像有健康检查，就屏蔽掉。
	ONBUILD 
		当所创建的镜像被当做其他镜像的基础镜像时所执行的操作指令
构建镜像：
	Dockerfile编写完成后可以使用docker build 来生成镜像
	如：docker [image] build -t "hn/myubuntu:v1.0" .   //-t用来添加tag标签。
	最后的.可以不准确地理解为代表在哪个目录下的Dockerfile
	准确地描述是指定 上下文路径 docker build命令会把该目录下的内容打包给Docker引擎
	以帮助构建镜像。
	docker import构建：
	git repo构建；
	tar 构建：docker build http://xxxxx/xxx.tar.gz
	标准输入构建：docker build - < Dockerfile 和 docker build - < xxx.tar.gz
	多阶段构建：--target name #可以单独构建某一阶段
修改镜像标签：
	docker tag id newck/newname:version
	只是引用了，旧标签依然存在，可以
删除标签：
	docker rmi docker.io/ubuntu
重命名容器：
	docker rename old_name new_name
重命名镜像：
	docker tag IMAGEID(镜像id) REPOSITORY:TAG（仓库：标签）
	//删除原有标签docker rmi 旧名：旧标签//按照ID删除则彻底删除了(需加-f)
删除：
	镜像 docker rmi
	容器 docker rm #运行中的容器要加-f（发送kill信号）或者先停止再删除
	删除所有处于终止态的容器：docker container prune
启动容器：
	#检查本地是否存在指定的镜像，不存在就下载
	#利用镜像创建并启动一个容器
	#分配一个文件系统，并在只读的镜像层外面挂在一层可读写层
	#从宿主机配置得网桥接口中接一个虚拟接口到容器中
	#从地址池分配一个ip给容器
	#执行用户指定的命令
	#执行完毕容器被终止
	docker run name +各种参数
										希望是危险的东西，是精神苦闷的根源。--瑞德
终止容器：
	docker container stop name或ctrl+d或exit
进入容器：
	docker exec -it id /bin/bash
停止容器：
	docker stop id
退出容器：
	exit	退出即停止--  //run启动的退出，start启动后exec进入再exit不退出
	ctrl+d	退出即停止
	ctrl+P+Q 退出但不停止容器
删除容器：
	docker rm id
	docker rm $(docker ps -q) 全部删除
启动终止的容器：
	docker start name
	docker restart name 先终止再启动
守护态运行：
	-d 放到后台运行
守护容器：
	若无前台进程，-d启动容器依然是死的-- docker run -d centos /bin/bash
	有前台程序运行，就可以实现容器的守护态启动后存活-- docker run -d centos /bin/bash -c "nohup ping -i 1000 www.baidu.com
查看容器输出信息：
	docker logs 容器name
进入后台运行容器：（-d）
	attach命令：#当多个窗口同时attach到同一个容器时，所有窗口同步显示，一个窗口阻塞，所有窗口阻塞，一个退出，后台容器也退出。
		docker attach name 
	nsenter命令：窗口退出，后台不退出
	exec命令：类似新启动一个线程，退出后，后台容器不退出docker exec -it id /bin/bash
实例：docker运行MySQL
	拉取镜像-- docker pull mysql:5.6
	后台启动-- docker run --name mysql -p 3303:3306 -e MYSQL_ROOT_PASSWORD=24641314 -d mysql:5.6
	进入容器-- docker exec -it id /bin/bash
	启动MySQL-- mysql -uroot -p
	远程连接：1.查看本容器的本地ip地址端口
		2.使用公网修改端口后连接
导出容器：#导出到本地文件
	docker export 容器id > name.tar
	例：docker export id > name.tar
导入容器：
	docker import ck/name:version
	导入容器快照，丢失所有保存的历史记录和元数据信息
	例：cat ubuntu.tar | docker import - test/ubuntu:v1.0
仓库：(Repositry)
	注册服务器---仓库1-------镜像1
			 |---仓库2   |---镜像2
	本地私有仓库：docker run -d -p 5000:5000 --restart=always --name registry registry
		上传：1)docker tag ubuntu:18.04 localhost:5000/myubuntu:18.04
			  		2)docker push localhost:5000/myubuntu:18.04
		查看：curl localhost:5000/v2/_catalog
		下载：docker pull localhost:5000/myubuntu:18.04
		高级配置:
		配置能通过HTTPS访问的私有仓库:vim /etc/docker/daemon.json
			"insecure-registry":["192.168.57.129:5000"]
hub.docker:
	登录：docker login
	下载镜像：docker pull ck/name:version
	上传镜像：1)docker tag ubuntu:18.04 hn9527/myubuntu:18.04
			  2)docker push  hn9527/myubuntu:18.04
网络管理：
	安装docker后自动创建三个网络
	查看网络：docker network ls
		bridge：即桥接网络，查看name：docker network inspect bridge | grep name 查看网络：ifconfig
		             容器创建时自动连接到bridge网络，从子网的地址池中获得一个IP地址
		             对于连接到默认的bridge之间的容器可以通过IP地址互相通信
自定义网络：
	创建桥接网络：docker network create network1
	查看：	docker network ls	详细信息：docker network inspect network1
	网络接口名称和子网都是由docker随机生成，也可以手动指定：
		docker network create -d bridge --subnet=192.168.16.0/24 --gateway=192.168.16.1 network1
	运行容器时指定网络：
		docker run -it --name shiyanlou001 --network network1 --rm busybox /bin/sh
	运行容器后指定网络：
		docker network connect network1 shiyanlou001
	连接到同一个网络的容器可以通过容器名去ping另一个容器：docker嵌入的DNS服务支持该网络的容器名解析
	
数据管理：
	#1.数据卷
	#2.数据卷容器
	1.数据卷可以在容器之间共享和重用
	2.对数据卷的修改会立马生效
	3.对数据卷的更新，不会影响镜像
	4.卷会一直存在，直到没有容器使用
创建一个数据卷：
	-v +目录 or docker volume create my-vol
	#启动一个挂载数据卷的容器
	docker run -d -p --name web --mount source=my-vol,target=/opt/webapp name/name 
		python app.py  
	#挂载一个主机目录作为数据卷,例加载主机的/src/webapp到容器的/opt/webapp
	docker run -d -P --name web -v /src/webapp:/opt/webapp name/name 或
	docker run -d -P --name=web --mount type=bind,source=/src/webapp,target=/opt/webapp 
			name/name python app.py
	#挂载一个本地文件作为数据卷,例记录容器中输入的命令
	docker run -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash
	或 docker run --rm -it --mount type=bind,soource=$HOME/.bash_history,target=/
			root/.bash_history name/name bash
数据卷容器：
	创建一个命名的数据卷容器dbdata:
	docker run -d -v /dbdata --name dbdata ck/name
	然后，在其他容器使用--volumes-from dbdata 来挂载dbdata容器中的数据卷
	docker run -d --volumes-from dbdata --name=db1 ck/name
数据卷删除：
	docker volume rm my-vol
	无主数据卷：docker volume prune
外部访问容器:
	使用-P标记时，docker会随机映射一个49000-49900的端口到内部容器开放的网络端口
	使用-p时，可以指定要映射的端口
	ip:ip/[tcp|udp]可以指定tcp或udp端口
查看信息:
	docker logs container_name
	映射端口配置:docker port nostalgic_morse 5000
容器互联：
	使用--link参数#建议将容器加入自定义Dockerfile网络连接而非--link
	新建网络:
		docker network create -d bridge my-net(-d指定网络类型bridge|overlay)
	连接容器：
		1)docker run -it --rm --name busybox1 --network my-net busybox sh
		2)docker run -it --rm --name busybox2 --network my-net busybox sh
		busybox1:ping busybox2
		busybox2:ping busybox1
		有ip返回表示两个容器建立了互联关系
	Docker Compose:多个容器互相连接时使用
配置DNS：
	配置全部容器的DNS：vim /etc/docker/daemon.json {"dns":["114.114.114.114","8.8.8.8"]}
	手动配置：docker run + -h HOSTNAME 或者 --hostname=HOSTNAME设定容器的主机名
			--dns=IP_ADDRESS添加DNS服务器到容器的/etc/resolv.conf中，不在/etc/
				hosts中的域名用这个服务器解析
			--dns-search=DOMAIN 设定容器的搜索域，当设定为.xxx.com时，搜索host主机时
				DNS不仅搜索host,还搜索host.xxx.com
高级网络配置：
Compose:#定义和运行多个Docker容器的应用
	允许用户通过一个单独的docker-compose.yml模板文件来定义一组相关联的应用容器为一个项目
	服务：一个应用的容器，实际上可以包括若干运行相同景象的容器实例
	项目：有一组相关联的应用容器组成的一个完整的业务单元，在docker-compose.yml文件中定义
		由Python编写，实际调用Docker服务中提供的API来对容器进行管理
	管理：对象为项目，通过子命令对项目中的一组容器进行便捷地生命周期管理
	安装:curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) 
		-o /usr/local/bin/docker-compose
	添加权限：chmod +x /usr/local/bin/docker-compose
	bash命令补全:sudo curl -L https://raw.githubusercontent.com/docker/compose/1.21.2/
		contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose
	删除：rm /usr/local/bin/docker-compose
Machine:#负责在多种平台上快速安装Docker环境
	安装:curl -L https://github.com/docker/machine/releases/download/v0.13.0/docker-
		machine-`uname -s`-`uname -m` > /usr/local/bin/docker-machine
Swarm:#提供Docker容器集群服务

LinuxKit:#将多个镜像组成最小定制的Linux系统
	安装：brew tap linuxkit/linuxkit
		  brew install --HEAD linuxkit









