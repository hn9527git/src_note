exec函数：
	一般规律：
		l(list):命令行参数列表
		p(path):搜索file时使用path
		v(vector):使用命令行参数数组
		e(envioronment):使用环境变量数组设置新加载程序运行的环境变量，不使用进程原有的环境变量
	int execl(const char *pathname, const char * arg0, ... /* (char *) 0 */);
		execl("/bin/ls","-l",NULL);//使用路径和文件名加载进程
	int execlp(const char *file, const char * arg0, ... /* (char *) 0 */);
		//借助环境变量PATH使用，如果PATH找不到这个可执行文件则出错返回
		//通常调用系统程序
		execlp("ls","ls","-l",NULL);
	int execle(const char *pathname, const char * arg0, .../* (char *)0, char *const envp[] */);
	int execv(const char *pathname, char *const argv[] );
	int execvp(const char *file, char *const argv[] );
		//将参数放进数组里
		char* argv[] = {"ls","-l",NULL};
		execvp("ls",argv);
	int execve(const char *pathname, char *const argv[], char *const envp[] );
		//真正的系统调用，放在卷2，其余放在卷3
	六个函数返回：若出错则为- 1，若成功则不返回
exec执行新程序的进程保持了原进程的下列特征：
	• 进程I D和父进程I D。
	• 实际用户I D和实际组I D。
	• 添加组I D。
	• 进程组I D。
	• 对话期I D。
	• 控制终端。
	• 闹钟尚余留的时间。
	• 当前工作目录。
	• 根目录。
	• 文件方式创建屏蔽字。
	• 文件锁。
	• 进程信号屏蔽。
	• 未决信号。
	• 资源限制。
	• tms_utime, tms_stime, tms_cutime以及t m s _ u s t i m e值
	打开文件的处理默认为保持打开，可用fcntl设置exec关闭标志，使其在exec时关闭该描述符
	有效I D是否改变则取决于所执行程序的文件的设置 -用户- I D位和设置-组- I D位是否设置
进程的文件描述符关系：
	PCB进程控制块--》打开的文件描述符表--》文件描述符--》文件状态标志，偏移量，v节点指针包含(v节点、i节点、文件长度)
	其中v节点指针各个打开同一文件的文件描述符共享