-----------------------------进程-------------------------------------------------------------------
进程：
	独立的进程地址空间，独立的PCB
	最小分配资源单位
fork后进程相同：
	全局变量、.data、.text、堆、栈、用户ID、宿主目录、进程工作目录、信号处理方式......
不同：
	进程ID、fork返回值、父进程ID、进程创建时间、闹钟、未决信号集
共享：
	文件描述符、mmap映射区
动态创建进程的缺点：
	1、会造成很多细微的进程，进程间的切换很耗CPU时间
	2、动态创建进程比较耗费时间，导致较慢的客户响应
	3、动态创建进程是当前进程的完整映像，当前进程必须谨慎管理其分配的文件描述符和堆内存等系统资源。
-----------------------------线程-------------------------------------------------------------------
线程：
	最小的执行单位
查看进程下的线程状态：
	ps -Lf 进程ID
	//LWP列：代表轻量级进程，即线程号(LWP, light weight process)，不同于线程ID
三级映射：
	通过PCB的某个指针成员指向页面，页面内的指针指向页表，页表内的指针指向页目录，然后映射到物理地址
	进程有不同的页面指针
	线程的页面指针相同，所以内存地址共享
线程独占：
	具有独立的PCB线程控制块
	具有独立的用户堆栈和系统堆栈
	独立的程序计数器PC
	独立的寄存器
	线程ID
	errno变量
	信号屏蔽字！
	调度优先级
线程共享：
	用户地址空间共享//.text .data .rodata .bss  heap 共享库
	全局变量(除errno外)
	文件描述符
	信号处理方式！
	当前工作目录
	用户ID和组ID
	未决信号集
线程优点：//比较突出
	提高程序并发性、开销小、数据通信、共享数据更方便
线程缺点：
	库函数，不稳定，编写调试困难，对信号支持不好
线程函数遇到错误时并不设置标准unix的error变量
	而是把errno的值作为函数返回值返回调用者。
线程ID：
	pthread_self(void);//返回线程ID，不同进程内的线程的线程ID可以重复，在进程内部标识自己
创建线程不对进程拷贝，和进程共用所有资源,线程和进程不分离
	编译时加上 -pthread
	如果创建线程的进程结束了，所有线程都结束
	将创建线程的进程称之为主线程
	如果一个进程没有创建线程，即可以称为进程，也可以成为线程
	cpu最小的调度单位为线程
int pthread_create(pthread_t *pid,const pthread_attr_t *attr,void *(*start_routine)(void *),void *arg);//创建线程
	-- pid :指针，指向线程创建成功后的线程ID
	-- attr:线程属性结构体指针，NULL表示使用默认属性
	-- start_routine:线程创建后要执行的函数
	-- arg:指向传递给线程函数的参数
	-- 成功返回0
线程属性联合体	union pthread_attr_t
	获取线程属性的函数使用方法:
		#define _GUN_SOURCE
		#include <pthread.h>
		int pthread_getattr_np(pthread_t thread,pthread_attr_t * geted_attr);
		一系列获取状态的函数 例：pthread_attr_getdetachstate(&geted_attr，&state);
		//使用完需要销毁该获得的联合体
		int pthread_attr_destory(pthread_attr_t *geted_attr)
	分离状态：
			线程有两种状态，joinable(非分离)和unjoinable(分离)
			前者：线程退出时不会释放所占用的堆栈和线程描述符，只有调用pthread_join()函数才会释放
				  非分离线程可在主线程中使用pthread_join函数等待子线程的结束
			后者：在线程创建时或创建后调用，改为unjoinable状态，线程退出时自动释放所占资源。
				  分离线程没有pthread_join函数，可以让主线程先退出而进程不退出，一直等到子线程退出了进程才退出。
				  在main线程中执行pthread_exit终止main线程，但进程的资源会为main线程创建的其他线程保持打开的状态，
				  直到其他线程都终止。（非main线程中调用pthread_exit函数，只退出当前线程）
		分离线程：
			线程默认是非分离的，父线程会维护子线程的某些信息并等待子线程的结束，如果父线程没有调用pthread_join函数，
			子进程结束时，父线程维护的信息没有及时释放，如果创建多个子线程，可能堆栈空间不足出错返回
		分离：
			（1）int pthread_detach(id)；//线程创建完成后，将id指定的线程设置为分离线程
			（2）创建时设置分离属性	pthread_attr_init(&thread_attr);
									pthread_attr_setdetachstate(&thread_attr,PTHREAD_CREATE_DETACHED);
									pthread_attr_getdetachstate(&thread_attr,);//查看
									pthread_create(&tid,&thread_attr,func,NULL);
									pthread_attr_destory();
	调度策略和参数：
		实时与非实时：前者通过优先级来抢占cpu，Linux是一个非实时系统，但其线程也分实时和非实时！
		（1）SCHED_OTHER（分时调度策略）默认
		（2）SCHED_FIFO（先来先服务）
		（3）SCHED_RR（时间片轮循）
	栈尺寸：
		//获取线程默认栈尺寸的函数,//首尾工作同上
		int pthread_attr_getstacksize(pthread_attr_t *geted_attr,size_t *stacksize);
	优先级：
		//获得最大或最小优先级函数
		int sched_get_priority_min(int policy);//参数为三种策略，返回值为优先级数
int pthread_join(pthread_t pid,void **value_ptr);
	-- pid:等待的线程号
	-- value_ptr：复制一份线程退出值到一个内存区域中，该指针指向该内存
	-- 成功返回0，失败返回错误码
特点：
	创建线程比创建进程的系统开销低
	线程之间的通信简单快速
	响应快
	改善程序结构
	使多处理系统更加有效
线程标识符
	获取自身标识符：pthread_self()
	比较标识符：pthread_equal(1,2)
取消和清理线程：
	int pthread_cancle(id);//请求取消同一进程中的其他线程，返回0，失败返回错误码
		-- 本函数不一定能取消陷入死循环的线程
		-- 可以在线程处理函数中可能发生死循环的地方调用
	int pthread_testcancel()函数，让内核去检测是否需要取消该线程
	调用此函数取消了一个线程后，应该调用函数对线程退出之后的环境进行清理(线程清理处理程序)
	viod pthread_cleanup_push(void (*routine)(void *),void * arg);
		-- routinue:函数指针
		-- arg:参数指针
		-- 由该函数压栈的routinue函数何时执行
			（1）线程主动结束时，比如return或pthread_exit
			（2）调用函数pthread_clearnup_pop,且其参数为非0时（弹出压栈的函数，不执行，因为参数为0）
			（3）线程被其他线程取消时，即被调用pthead_cancel()函数
	void pthread_cleanup_pop(int execute);
		-- execute:为0时不执行清理函数，非0时则执行清理函数
		-- 此函数必须与push函数成对出现（即使不执行（放在return语句后）），否则出错
给同进程的线程发送信号
	int pthread_kill(pthread_t pthread,int signal);//不是杀死，只是发信号，被发送信号的线程要注册该信号的处理函数
		//发送0可以检测线程是否存在，存在返回0，不存在返回错误码，如ESRCH表示线程不存在，EINVAL表示信号不合法
		//如果被发送信号的线程没有注册信号处理函数，则按照信号默认的行为影响整个进程。
线程的结束：
	（1）在线程函数中调用pthread_exit()函数			//主动//不会导致C++对象被析构
	（2）线程所属的进程结束了，比如调用了exit函数	//被动//不要用，C++对象不会被销毁，内存泄漏
	（3）线程函数执行结束后返回						//主动//推荐使用，正常结束线程
	（4）线程被同一进程下的其他线程通知结束或取消	//被动//用于用户等不及这个线程的结果使其结束或取消
	注：exit是结束进程的函数，如果在线程中调用exit会把进程和所有的线程都结束；最好不要在线程中调用
注意：
	应避免在多线程中调用fork，除非立马exec，子进程中只有调用fork的线程存在，其他线程都应该pthread_exit
	多线程和信号的复杂语义很难共存，不应同时使用。
线程中执行fork：
	仅仅是调用fork的线程的完整复制，不会创建多个线程
	如果线程中有锁，需要调用pthread_atfork(prepare,parent,child);//在fork调用前调用
		-- 三个参数都是函数指针
		-- perpare:在fork创建子进程之前调用，在其内部对父进程中的锁执行加锁操作
		-- parent:在fork创建子进程之后，fork返回之前在父进程中执行，释放在prepare中被加锁的锁
		-- child:在fork创建子进程之后，fork返回之前在子进程中执行，释放在prepare中被加锁的锁
		-- 如此，创建子进程之后，锁的状态就明了了，处于解锁状态
线程与信号：
	1、进程中的线程共享该进程的信号
	2、如果一个线程设置了信号处理函数，那么他将覆盖其他线程为该信号设置的信号处理函数
	因此，需要创建一个专门管理信号的线程
	1、在主线程创建其他线程之前调用pthread_sigmask()设置信号掩码
	2、在某个线程中调用sigwait等待某个信号等处理
------------------------C++ 11 中的线程类--------------------------------------------------------------
专用命名空间：
	std::this_thread::******
常用线程类成员函数：
	thread:构造函数有4种
	get_id:获得线程ID
	joinable:判断线程对象是否可连接
	join:阻塞函数，等待线程结束
	native_handle:用于获得与操作系统相关的原生线程句柄
	swap:线程交换
	detach:分离线程
	yield:让出自己的CPU时间片
	sleep_until:阻塞到某个时间点
	sleep_for：阻塞一段时间
创建：
	thread();//默认构造函数，线程函数不执行
	thread(线程函数指针);
	thread(线程函数，参数);
	thread(move(thread_other));被移动线程不会执行，因为它的线程函数移动给本线程了
线程同步：
	（1）基本互斥锁，std::mutex
		成员函数：
			mutex:构造函数
			lock:上锁，阻塞等待其他线程解锁后再本线程上锁
			unlock:解锁，配对使用
			Try_lock：如果没上锁，则上锁
			native_handle:得到本地互斥锁句柄
	（2）递归互斥锁，std::recursive_mutex
	（3）定时互斥锁，std::time_mutex
		成员函数：
			mutex:构造函数
			lock:上锁，阻塞等待其他线程解锁后再本线程上锁
			try_lock:没上锁则努力上锁，但不阻塞
			try_lock_for:没上锁则再一定时间内努力上锁，过了时间就退出
			native_handle:得到本地互斥锁句柄
	（4）定时递归互斥锁，std::time_mutex
------------------------线程同步机制-----------------------------------------------------------------
临界资源：
	一次仅允许一个线程使用的共享资源，各个线程应该互斥地访问
临界区：
	每个线程中访问临界资源的那段代码称为临界区临界区：
	获取临界区的锁称之为进入临界区，把锁的释放称之为离开临界区
	与互斥锁和条件变量的不同：前两个在系统的任何进程都是可见的，而临界区的
	的作用范围仅限于本进程，其他进程无法获取该锁
信号量:
	将所有共享数据资源数据化，使用资源前检查信号量的值，大于零表示有资源可用
	等于零表示没有资源可用，则阻塞等待
互斥锁：
	原子性：操作系统保证如果一个线程锁定了一个互斥锁，没有其他线程可以在同一时间成功锁定这个互斥锁
	唯一性：在一个线程锁定互斥锁后，在它解除锁定之前没有其他线程可以锁定这个互斥量
	非繁忙等待：如果一个线程锁定了一个互斥锁，第二个线程又试图去锁定，则第二个线程将被挂起直到第一个线程
		解除锁定，第二个线程才被唤醒同时锁定这个互斥锁
	定义一个互斥变量：
		pthread_mutex_t mutex;
	互斥锁初始化函数：
		//动态方式
		int pthread_mutex_init(pthread_mutex_t *[restrict]mutex,const pthread_mutex_attr *[restrict]attr);
			--[restrict]:只用于限定指针，用于告知编译器所有修改该指针指向内容的操作全部基于该指针，即不存在其他修改途径
			--优点：帮助编译器进行更好的代码优化，生成更有效率的汇编代码
		//静态方式，不需要销毁
		#define PTHREAD_MUTEX_INITIALIZER {{0,0,0,0,0,{0}}}
		pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER;//注意此处mutex不能是指针
	互斥锁加锁函数：
		int pthread_mutex_trylock(pthread_mutex_t * mutex);//不阻塞，失败返回错误
		int pthread_mutex_lock(pthread_mutex_t *mutex);//阻塞等待资源解锁
	互斥解锁函数：
		int pthread_mutex_unlock(pthread_mutex_t *mutex);//调用本函数的线程必须是给互斥锁加锁的同一个线程
	互斥锁解除函数：
		int pthread_mutex_destory(pthread_mutex_t *mutex);
读写锁：
	以读模式加锁后，当有多个线程试图再以读模式加锁时，并不会造成这些线程阻塞等待解锁
	大大增加了并发效率，并不是速度一定比互斥锁快
	特点：
		（1）如果一个线程用读锁锁定了临界区，那么其他线程也可以用读锁来进入临界区，就可以并行操作了，但如果再用写锁加锁就会造成阻塞，写锁请求阻塞后，
		后面继续有读锁来请求时，这些读锁就会被阻塞，这样避免了读锁长期占用资源，防止了写锁饥饿
		（2）如果一个写锁锁定了临界区，那么其他线程的读写锁都会阻塞
	定义读写锁:
		pthread_rwlock_t rwlock;
	读写锁初始化：
		//常量初始化，不需要销毁
		pthread_rwlock_t rwlock=PTHREAD_RWLOCK_INITILIZER;//不能是指针
		//函数初始化
		int pthread_rwlock_init(pthread_rwlock_t *[restrict] rwlock,const pthread_rwlockattr_t * restrict attr);
			-- rwlock:表示读写锁
			-- attr:读写锁属性结构体指针，NULL表示默认属性
			-- 成功返回0，失败返回错误码
	读写锁上锁函数：
		//读写锁读模式上锁
		int pthread_rwlock_rdlock(pthread_rwlock__t * rwlock);//阻塞等待资源解锁
		int pthread_rwlock_tryrdlock(pthread_rwlock__t * rwlock);//不阻塞，无可用资源返回EBUSY
		//读写锁写模式上锁
		int pthread_rwlock_wrlock(pthread_rwlock__t * rwlock);//阻塞等待资源解锁
		int pthread_rwlock_trywrlock(pthread_rwlock__t * rwlock);//不阻塞，无可用资源返回EBUSY
	读写锁销毁函数：
		int pthread_rwlock_destory(pthread_rwlock__t * rwlock);
条件变量：
	互斥锁只有两种状态，条件变量是对互斥锁的补充，它允许线程阻塞并等待另一个线程发送的信号，当收到信号时，
		阻塞的线程就被唤醒并试图锁定这个与之相关的互斥锁
	定义一个条件变量：
		pthread_cond_t cond;
	条件变量初始化：
		//函数初始化
		int pthread_cond_init(pthread_cond_t *cond,const pthread_cond_attr *attr);
		//静态初始化
		pthread_cond_t cond=PTHREAD_COND_INITIALIER;//不能是指针
		清除cond指向的条件变量的任何状态，存储条件变量的内存空间不释放
	等待条件变量函数:
		int pthread_cond_wait(pthread_cond_t *[restrict] cond,pthread_mutex_t *[restrict] mutex);
			-- cond:条件变量指针
			-- mutex:互斥锁变量指针
		//调用后发生原子操作：线程将mutex解锁，线程被条件变量cond阻塞。
		//可以被pthread_cond_signal()或pthread_cond_broadcast()函数唤醒，如果唤醒后条件还不满足，则继续阻塞
	唤醒等待条件变量的函数
		int pthread_cond_signal(pthread_cond_t * cond);
			--只唤醒一个等待该条件变量的线程
		int pthread_cond_broadcast();
			--唤醒所有等待该条件变量的线程
	条件变量解除函数：
		int pthread _cond_destory(pthread_cond_t *cond);
可重入函数：
	一个函数没有执行完成，有一次进入该函数执行
	可重入表示该函数被重入之后不会产生任何不良后果，可在多线程环境下放心使用
--------------------------------------线程池-------------------------------------------------------------------
提前创建一堆线程，初始都处于空闲等待状态，当有任务时，就取一个线程来处理，处理后再放进线程池中，避免了创建销毁线程的开销
适用于连续产生大量并发任务的场合
//任务结构体
struct thread_task_t
{
    void* (*func)(void *);         //任务，即回调函数
    void* arg;                     //回调函数的参数
};
//线程池结构体
struct thread_pool_t
{
    pthread_mutex_t mutex;         //用于锁住本结构体
    pthread_mutex_t thread_counter;//用于获取忙碌线程状态个数的锁
    
    pthread_cond_t queue_not_full; //当任务队列满时，添加任务的线程阻塞，等待此条件变量
    pthread_cond_t queue_not_empty;//当任务队列不为空时，通知等待任务的线程

    pthread_t *threads;            //存放线程池中每个线程的tid，数组
    pthread_t adjust_tid;          //线程池管理者线程

    thread_task_t* task_queue;      //任务队列首地址

    int min_thread_num;            //线程池最小线程数
    int max_thread_num;            //线程池最大线程数
    int live_thread_num;           //当前存活的线程数
    int busy_thread_num;           //忙状态线程数
    int wait_exit_thread_num;      //等待退出线程数

    int queue_begin;               //任务队列队头下标
    int queue_end;                 //任务队列队尾下标
    int queue_size;                //任务队列中实际任务数
    int queue_max_size;            //任务队列最大能容纳的任务数

    int shutdown;                  //线程池使用状态
};
1、创建线程池
	为线程池自身、线程ID数组、任务队列申请空间
	初始化锁和条件变量
	根据参数初始化其他变量，并创建最小数量的线程
	创建管理者线程
2、线程执行函数
	对线程池加锁，等待任务队列有任务(条件变量)
		如果一直没任务，并接收到有任务通知，就判断需要结束的闲线程是否大于最小保留线程数，符合则自杀
	有任务则跳出循环，从任务队列头部取一个任务
	通知阻塞在添加任务这个条件变量的线程有空位，可以继续添加任务
	将池中忙线程数+1
	调用任务中的函数指针去处理任务
	将池中忙线程数-1
	循环
3、管理者线程函数
	睡眠默认时间
	取出池中属性
	根据算法判断是否需要加减线程
	循环
4、添加任务函数
	判断任务队列是否有空(条件变量)
	判断是否是停用线程池
		是的话通知其他线程有任务可取
	将任务放在队尾
	通知其他线程有任务可取






	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	