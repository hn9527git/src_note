+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++==
QT连接MySQL:
	出现错误：QSqlDatabase: QMYSQL driver not loaded QSqlDatabase: available drivers: QSQLITE QMYSQL QMYSQL3 QODBC7
	解决办法：
		将mysql/lib/libmysql.dll复制到c：/windows中;
	终极解决办法：构建时使用MSVC就好了，使用mingw不行
	TMD这样不行了
Linux下Qt
	出错：没有找到pthread.h中的线程函数
	解决办法：
		再pro文件中加上LIBS +=-lpthread （即gcc编译时加上的-lpthread）
构造套件的黄色感叹号：
	标识编译器与调试器不配套，使用mingw时使用gdb，使用msvc应使用cbd调试器(一般因为没有安装cdb调试器)。
	解决办法：在控制面板的程序中找到kits构造套件，更改安装cdb调试器(已安装了实际没有时，可先卸载再安装即可)。
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++==
qt + vs2017:
安装qt for vs 插件即可
	1、没有ui_QtGuiApplication1.h
		右键编译自动生成，用everything查到后 加入项目属性vs目录包含中
	2、看不到打印的日志
		项目属性链接器系统子系统设置为控制台即可
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++==
F1        查看帮助
F2        跳转到函数定义（和Ctrl+鼠标左键一样的效果）
Shift+F2    声明和定义之间切换
F4        头文件和源文件之间切换
Ctrl+1         欢迎模式
Ctrl+2        编辑模式
Ctrl+3        调试模式
Ctrl+4        项目设置模式
Ctrl+5        帮助模式    
Ctrl+6        输出模式
Alt+0        显示或者隐藏侧边条，编辑模式下起作用（有时写的函数太长，屏幕不够大，就用这个）
Ctrl+Space    自动补全（貌似会和输入法的切换冲突）
ESc        切换到编辑模式
Alt+1        创建细节窗口
Alt+2        搜索结果窗口
Alt+3        程序输出窗口
Alt+4        编译输出窗口
Ctrl+B        编译工程
Ctrl+R        运行工程
Ctrl+I        自动对齐
Ctrl+/        注释行，取消注释行
Ctrl+Shift+<         折叠代码块
Ctrl+Shift+>         展开代码块
Ctrl+[        跳到代码块的头部
Ctrl+]        跳到代码块的尾部
Ctrl+L        跳到某一行
Ctrl+F       查找替换当前选中的内容，按下Ctrl+F，会列出所有和你选的内容一样的语句
Ctrl+Shift+F  查找内容
F5            开始调试
Shift+F5   停止调试
F9            设置和取消断点
F10          单步前进
F11          单步进入函数
Shift + F11  单步跳出函数
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++==
生成过程：
	1.进入目录（含有.cpp和.h文件即可），qmake -project 生成一个与平台无关的项目文件hello.pro
	2.qmake hello.pro 生成与平台相关的makefile文件
	3.make 构建该程序
析构：
	Qt会在删除父对象的时候自动删除其所属的所有子对象，即所有子孙窗口部件和子布局
布局：
	当将子布局对象添加到父布局对象中时，子布局对象就会重新定义自己的父对象。例，将主布局装到对话框中时，
	它就成为对话框的子对象了，于是他所有的子窗口部件都会重定义自己的父对象，从而变成对话框中的子对象。
默认按钮：
	setDefault(ture)，就是当用户按下Enter键时能够按下对应的按钮
伙伴(buddy):
	就是一个QLable和一个窗口部件，当按下设置的QLable快捷键时由窗口部件接收焦点。
	QT对象中只有QLabel标签对象才可以有伙伴窗口部件，
		也只有当QLabel对象具有快捷键时，伙伴关系才有效。 
&：
	该符号后边的字符与Alt组合为该控件的快捷键
Q_OBJECT：
	对于所有定义了信号和槽的类，在类定义开始处的 Q_OBJECT宏都是必需的。
qDebug()：
	便利使用：#define cout qDebug()<<"["<<__FILE__<<":"<<__LINE__<<"]"
	禁用：
	在pro文件中加上 DEFINES +=QT_NO_DEBUG_OUTPUT
关于tr()函数：
	字符串周围的tr()函数调用是把它们翻译成其他语言的标记
moc:
	元对象编译器，含有Q_OBJECT宏必须运行moc
	使用moc类必须继承自QObject,Q_OBJECT宏必须出现在私有声明区。
复制ui上的控件：
	例：按下Ctrl，然后单击并拖动群组框即可复制
closeEvent():
	QWidget类的虚函数，当用户关闭窗口时，这个函数会被自动调用
模态：
	当前窗口不关闭，无法操作其他窗口
非模态：
	运行在应用程序中对于任何其他窗口都独立的窗口。
布局管理：
	确保窗体能够自动适应于不同的字体、语言和系统平台。
信号与槽：
	emit:
		发射信号，后接信号函数
	一个信号可以连接多个槽，调用时顺序不确定。
	多个信号可以连接同一个槽。
	信号可以连接信号connect(some,SIGNALE(),this,SIGNAL());
	连接可以被移除disconnect
	信号函数和槽函数参数的顺序和类型要一样，如果信号的参数多于槽函数参数，则多余的参数被忽略。
检验器类：
	QIntValidator,QDoubleValidator,QRegExpValidator
		QRegExp reg("[A-Za-z][1-9][0-9]{0,2}");
		this->ui->lineEdit->setValidator(new QRegExpValidator(reg,this));
		hasAcceptableInput()使用构造函数中设置的检验器判断行编辑器中的内容的有效性
QString:
	insert()函数：在原字符串特定的位置插入另一个字符串
	prepent()函数：在原字符串的开头插入另一个字符
	trimmend()函数：移除字符串两端的空白
	simplified()函数：移除字符串两端的空白，并且使用单个空格字符代替字符串中出现的连续空白字符。
	NULL字符串时void* 类型的对象 <> 空字符串是大小为0的字符串类型的对象。
QList:
	内部维护一个指针数组，如果存储的对象类型大小等于指针大小，直接存储对象，否则存贮对象的地址
	所以支持下标操作，所以查找快，直接使用下标访问。
QLinkedList:
	链式列表，非连续内存保存数据，插入速度快，不能使用下标。
QVector:
	查找快，在尾部插入快
QListIterator、QList<T>::const_iterator:
	只读迭代器，比读写速度快，尽量使用
QMutableListIterator、QList<T>::iterator:
	读写迭代器
QMap & QHash:
	QHash比QMap的查找速度快
	QHash任意顺序存储数据项，QMap总是按照key键顺序存储数据
	QHash的键类型Key必须提供operator==（）和一个全局的qHash（key）函数，
	而QMap的键类型KEY必须提供operator<()函数。
	若保存数据不要求顺序，尽量使用QHash
QVariant:
	可以保存许多Qt类型的值，也可以存放Qt容器类型的值，类似C++的联合(union)
常用算法：
	qABS():取绝对值
	qRound();四舍五入成整数
	qMax(a,b):最大值
	aSwap(a,b):交换a和b
大小写：
	Qt:CaseSensitive 设置大小写不敏感
正则表达式类 QRegExp：
	表达式+量词+断言
	[]和[^]：匹配与不匹配
	x[m,n]:至少m个，至多n个。
	+：前面的[]内的匹配至少出现一次，可以出现多次。
	*：前面的[]内的匹配出现0次或多次。
	？：前面的[]内的匹配0次或一次。
	^:开头匹配
	$:结尾匹配
	\b：单词边界
	\B:非单词边界
	\s:匹配一个空格
定时器：
	新建定时器：QTimer * name = new QTimer(parent);
	连接信号和槽：connect(name,SIGNAL(timeout()),this,SLOT(xx()));
	开启定时器：start(int time)每间隔time毫秒重启定时器。setSingleShot(true)只用一次。
	关闭定时器：stop();
button()和buttons()函数的区别:
	前者返回产生事件的按钮
	后者返回产生事件的按钮状态
绘图：
	QPinter-->引擎-->QPintDevice
	重写绘图事件，虚函数。窗口状态改变自动调用。
