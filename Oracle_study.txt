docker 部署 oracle:!!!
	拉取镜像：docker pull registry.aliyuncs.com/helowin/oracle_11g
		报错no space left on device--             https://blog.csdn.net/qijian2003122/article/details/82886989
		报错docker-runc not installed on system-- https://www.cnblogs.com/cxbhakim/p/8862758.html
		报错exec: "docker-proxy": executable file not found in $PATH-- https://www.cnblogs.com/cxbhakim/p/9149596.html
	启动容器：docker run -d --name oracle_11g -p 1521:1521 registry.aliyuncs.com/helowin/oracle_11g
		报错端口被占用 docker run -d --name oracle_11g -p 5000:1521 registry.aliyuncs.com/helowin/oracle_11g
	进入容器： docker exec -it 容器ID /bin/bash
	加载环境：source /home/oracle/.bash_profile
	登陆：	sqlplus /nolog
		connect /as sysdba 到这里就可以进行您想要的任何操作了
	容器系统用户 root密码：helowin
	修改密码：alter user 用户 identified by mima;
	scott解锁：alter user scott account unlock;
	数据卷启动容器用于保存数据：-- docker run -d -p 8888:8888 -p 5001:1521 -v /data/oracle:/u01/app/oracle registry.aliyuncs.com/helowin/oracle_11g 
	远程连接：
		1.查看服务被映射本地端口IP
		2.使用公网连接，并设置sid，本例中sid为helowin
查看Oracle的sid:
	select instance_name from  V$instance;
----------------------------------------------------------------------------------------------------
Oracle客户端下载:
	https://www.oracle.com/database/technologies/instant-client/downloads.html
破解码：
	Product Code：4t46t6vydkvsxekkvf3fjnpzy5wbuhphqz
	serial Number：601769
	password：xs374ca
安装Oracle客户端和plsql
	安装plsql后将客户端安装在plsql中
	在instantclient下新建network/admin/，并将tnsnames.ora放在admin下
	配置plsql首选项，Oracle主目录写instantclient的路径，oci.dll写instantclient/oci.dll重启plsql即可。
如果您打算将可选的 Oracle 配置文件（如 tnsnames.ora、sqlnet.ora ldap.ora 或 oraaccess.xml）与 
	Instant Client 放在同一位置，那么请创建一个C:\oracle\instantclient_12_2\network\admin 子目录。
	这是与此 Instant Client 链接的应用的默认 Oracle 客户端配置目录。
	或者，Oracle 客户端配置文件可以放在另一个可访问的目录中。然后，将环境变量 TNS_ADMIN 设置为该目录名称。
安装后sql中带中文得查不到结果解决办法：
	1、查询数据库的编码
		select userenv('language') from dual;
	2、添加系统环境变量
		变量名：NLS_LANG
		变量值：填入第一步查出来的值即可
plsql卡慢：
	1、设置兼容模式运行
	2、设置以管理员模式运行
	3、在首选项里面将检查连接选项打勾
	还是卡，hhh
视图：
	create view name[] as <子查询> [with check option];
	就像一个窗口，通过视图看数据，原本数据发生变化，视图里看到的也会发生变化
	[with check option]:通过视图进行的修改，必须也能通过该视图看到修改后的结果。
索引：
	create [索引类型] index 索引名 on 表名（列名，次序）;
序列：
	create sequence hero_seq
	increment by 1 
	start with 1 
	maxvalue 9999999
	//创建了一个名字为hero_seq的序列
	//这个序列从1开始，每次增加1，最大值是9999999
	使用：
		//获取序列的下一个值
		select hero_seq.nextval from dual;
		//获取序列的当前值
		select hero_seq.currval from dual;
…………………………………………………………………………………………………………………………………
增加：
	insert into table_name [列名1，...] values(值1,...)；
	//字符串要加单引号
	//日期：当前日期（SYSDATE()）TO_DATE('2019-3-12','yyyy-mm-dd')转换
批量插入：
	INSERT INTO TABLE_NAME [列名1，...] Subquery;
	Subquery是子查询语句，所查结果必须与前边的列名一一对应。
	或 //单SQL复制整张表，无法复制索引等信息
	CREATE TABLE TABLE_NAME [列名1，...] AS SELECT XX FROM TAB_FROM;
添加注释：	
  comment on table PROD.GS_MID_GJMY_YW_SETTLE is 'D112-国际漫游业务月结算表';
  comment  on  column  表名.字段名   is  '注释内容';
删除：
	DELETE FROM 表名称 [where ...] [in (...)] ...
	//不加条件 则删除整张表
	//物理删除：delete；极其危险
	//逻辑删除：增加flag字段，删除置0，没删置1，查询时加一个where字句；比较安全
	//可以通过回滚恢复数据
截断表：
	直接将所占用的数据空间删除，无法回滚,不产生回滚所需信息，所以比较快
	TRUNCATE TABLE 表名；
回滚：
	rollback;
事务处理：
	只支持数据更新操作；DDL不支持事务处理，且执行DDL时或更换用户时或退出数据库时所有事务自动提交
	原子操作，要么同时完成，要么同时失败
	指令放在缓冲区中
	执行commit操作，更新才会真正执行；若是有问题，rollback回滚；--缓冲区清空
死锁：
	每个session有自己独立的事务处理
	A:更新myemp表，无commit和rollback；
	B:更新同样数据时，阻塞等待A的结果，
数据伪列：
	1.ROWNUM
		行号：对查询的每一条记录自动编号，动态生成，不固定
	作用：	取出第一行记录；##只有where rownum=1 可用，其他值不能用；
		取出前N行记录；where rownum<=n，
		取出某连续n行： select rownum ro(一定要使用别名),ename from emp;
		返回的结果集中rownum为一列数据，
				然后再使用where  temp.ro>5 子句 限定范围
				例： select * from (select rownum ro,ename,sal from emp) where ro between 2 and 6;
	2.ROWID//数据分析上
		行ID：进行数据保存时，所有的表都有一个物理地址编号，可通过ROWID查询
		ROWID：数据对象编号+数据保存文件编号+数据保存块号+数据保存行号
		可通过ROWID查询到唯一的数据
		删除重复记录，只保留一条添加时间最早的记录：
			 select a,b,c,MIN(ROWID) from tab group by a,b,c ; 
			 得到每个初始数据ROWID，然后删除//not in;
数据字典：
	用户级别：user_*开头
	管理员级别：dba_*开头
	全部级别：all_*开头
查看当前用户下的表：
	select table_name from user_tables;
表重命名：
	RENAME 旧表名称 TO 新表名称
复制表：
			    |-----子查询------|
	create table myemp as select * from emp;
	复制表结构，不复制数据：
		create table myemp as select * from emp where 1=2;
删除表：
	drop table 表名称；//不提供全部删除表------>进入回收站
			查看回收站：SHOW RECYCLEBIN;或者 SELECT * FROM USER_RECYCLEBIN;
			删除回收站的一张数据表：PURGE TABLE 表名；
			清空回收站：PURGE RECYCLEBIN;
	drop table 表名称 PURGE;强制删除，不进入回收站。
闪回技术：FLASH BACK
	删除数据表后，并未真正删除，而是存在回收站中，名为BIN*
	恢复被删除的表：FLASHBACK TABLE 表名 TO BEFORE DROP;
修改表结构：--了解!!!
	添加列：ALTER TABLE 表名称 ADD（列名称,类型[DEFAULT 默认值]，。。。）;
	修改列:  ALTER TABLE 表名称 MODIFY（列名称,类型[DEFAULT 默认值]，。。。）;
	删除列：ALTER TABLE 表名称 DROP COLUMN 列名称
非空约束：
	NOT NULL
唯一约束：
	UNIQUE -- NULL不受此限制
	设置约束名称：CONSTRAINT UK_ename UNIQUE(ename);
查看约束对象：
	select * from user_constraints;
主键约束：
	唯一约束+非空约束;
	CONSTRAINT pk_id PRIMARY KEY(mid);
检查约束：
	影响性能
	在数据更新前设置一些数据过滤条件
	例：age NUMBER(3) , CONSTRAINT ck_age CHECK (age BETWEEN 0 AND 150);
外键约束：
	CONSTRAINT fk_mid FOREIGN KEY(mid) REFERENCES other_tab(mid);
	限制一:删除父表前必须首先删除子表
			互有外键，则强制删除：DROPTABLE tab_name CASCADE CONSTRAINT;
	限制二:父表中作为字表的外键字段，必须设置为主键约束或唯一约束
	限制三：级联删除：删除父表某条数据时，子表相关数据也删除
					设置外键时加上 ON DELETE CASCADE
			级联更新：删除父表某条数据时，子表相关数据设置为空
					设置外键时加上 ON DELETE SET NULL
约束修改：
	控制约束，约束要有名字
		alter table add CONSTRAINT -------
		alter table drop CONSTRAINT 约束名称
	修改非空约束要使用修改表结构语句；
序列：
	oracle 12c 版本之前不支持自动增长数据类型
	CREATE SEQUENCE 序列名称<myemp>;
	myseq.nextval 序列的下一个值；
	myseq.currval 序列的当前值；
	缓存：提升代码性能，缓存了二十个数据
	序列为数据表中某个字段自动编号，不能直接写在创表语句中，必须使用insert语句；
	例：insert into tab_name(id,name) values (myseq.nextval,'xxx');
	拓展：1.修改序列步长：+ INCREMENT BY n;
		2.修改序列开始值：+ START WITH 666666;
		3.设置循环序列：+ MINVALUE 1 MAXVALUE 9 CYCLE [CACHE 3];CACHE为缓存个数；
同义词：
	即设置别名，例如，Oracle将sys.dual 设置别名为 dual;
	CREATE [PUBLIC] SYNOMYN 同义词名字 FOR 用户名.表名称
	加上 public 才能被所有用户使用
	删除：drop SYNOMYN 同义词名字
视图：
	为Scott用户授予创建视图的权限
	-- conn sys/24641314 as sysdba;
	-- grant create view to scott;
	创建视图：create or replace view myview as select语句;
	更新视图：创建简单(一张表)视图后，可以更改视图条件-- update myview set xx=xx where nn=nn;
	WITH CHECK OPTION:加上后，视图创建条件不能再更新。
	-- 更新非创建条件：可以但不合理
	定义只读视图：+ WITH READ ONLY;则不能修改（建议）；
	删除视图：drop view myview;
消耗资源显示：
	set autotrace on;
索引：
	-- 提升数据的查询性能。
	创建：CREATE INDEX 索引名 ON 用户名.表名(字段名);
	索引字段值改变，索引改变--》消耗大量内存空间
用户管理：DCL
	创建用户：CREATE UESR TANGYUAN IDENTIFIED BY WUGUI;
	系统权限：1.CREATE SESSION  2.CREATE TABLE
	-- 授权(CREATE SESSION)：GRANT CREATE SESSION TO TANGYUAN|PUBLIC WITH GRANT OPTION;
	-- 授权(创建表)：GRANT CREATE TABLE TO TANGYUAN;
	-- PUBLIC：授予权限给所有用户
	-- WITH GRANT OPTION:被授予权限用户可以传播该权限
	角色:oracle提供两个角色，CONNECT角色 RESOURCE角色；
	授予角色权限：GRANT CONNECT TO USER;  GRANT RESOURCE TO USER;
	-- 权限或角色发生了变化需要重新登陆。
	修改密码：alter user tangyuan identified by mima;
	-- 登陆时修改密码：alter user tangyuan passwd expire;
	锁定用户：alter user tangyuan account lock;
	-- 解锁用户：alter user tangyuan account unlock;
	授予用户操作对象权限给其他用户：
	-- 对象权限只有四种：1.INSERT 2.UPDATE 3.SELECT 4.DELETE;
	-- 授予：GRANT SELECT,INSERT ON EMP TO TANGYUAN;
	-- 撤回权限：REVOKE 权限 FROM TANGYUAN;
	-- 删除用户：DROP USER TANGYUAN CASCADE;
数据库备份：
	数据的导出与导入：
	针对一个用户的数据实现备份--只适合小数据
	-- 导出数据：
		1。建立备份文件夹
		2.cmd 进入该目录
		3.输入exp命令-》输name/mima--》缓冲区大小 --》导出文件--》导出权限--》导出数据表--》压缩区
	-- 导入数据：
		1.cmd 进入目录
		2.输入imp命令 按提示操作
	冷备份：
		即数据库服务停止，专门去备份。
		· 控制文件：v$controlfile
		· 重做日志文件： v$logfile
		· 数据文件(表空间)：v$datafile
		· 核心配置文件(pfile):SHOW PARAMETER pfile
		1.使用sys登陆
		2.找到控制文件信息
		3.找到重做日志文件
		4.找到数据文件
		5.找到核心配置文件
		6.记录所有文档位置
		7.关闭数据库 SHUTDOWN IMMEDIATE
		8.拷贝出以上的文件到指定的备份文件目录
		9.重新启动数据库服务 STARTUP
	热备份：不关机备份 
设计范式：
	第一设计范式：数据表中的每个字段都不可再分。
					使用基本数据类型，单表。
	第二设计范式：数据表中不存在非关键字段对任意一候选关键字段的部分函数依赖。
					字段之间不应该有数学关系，由几个字段可以成功推演出的一个字段不应存在。
					简单理解：多对多建表。
	第三设计范式:数据表中不存在非关键字段对任意一候选关键字段的传递函数依赖。
					一对多建表。优先考虑。
##########################################################################################################################################
DML:数据操作语言
DDL:数据定义语言
DCL:数据库控制语言
oracle中文占三个字符
查看用户下所有的表:
	select * from tab;
更改某列显示宽度：
	col 列名 for a10;
输出内容连接：
	select语句中可以使用||连接字符串或字段
区分大小写：
	orcle中数据是区分大小写的
模糊查询LIKE：
	------可用于任何数据类型，不止是字符串
	‘_’:匹配任意的一位字符
	‘%’：匹配任意的零位或一位或多位字符
排序：
	order by 字段名 [desc] #默认增序 ，加desc为降序，最后执行
	order by 是唯一可以使用select 语句中的别名的命令
group by子句：
	在select后边只能接进行分组得列名和统计函数
having子句：
	通常与group by子句一起用，用于进一步筛选分组后的结果

￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥
字符类函数：
	ASCII('abc')		返回第一个字符的ascii码值
	CHR(97)				ASCII逆反函数
	CONCAT('A','BC')	连接字符串
	INITCAP('ab c') 	大写每个单词的首字母，其余小写
	INSTR(C1,[c2,<i>[,j]]) 返回c2在c1中第j次出现的位置，i表示起始搜索位置，i为负数倒着搜索
	LENGTH(C1)			返回字符串长度
	LOWER(C1)			返回小写
	LTRIM(c1,c2)		将c1的最左边字符去掉使其第一个字符不在c2中
	REPLACE(C1,C2[,C3]) 用c3代替出现在c1中的c2
	ROUND	四舍五入 无第二个参数取整无小数  select round(265.123685,4) from dual;
	TRUNC	不进位 	select trunc(12.546) from dual;
	MOD	    求模	select mod(10,4) from dual;
日期函数：
	日月年	select sysdate from dual;含有时间默认只显示日月年
	时间戳	select systimestamp from dual;
	ADD_MONTHS	select add_months(sysdate,4) from dual;
	MONTHS_BETWEEN		select months_between(sysdate,hiredate) from emp;
	LAST_DAY		SELECT LAST_DAY(SYSDATE) FROM DUAL;
	NEXT_DAY	select next_day(sysdate,[0-6]) from dual;下一个星期几是几号。
	NVL	将NULL转换为0	select (sal+NVL(comm,0))*12 from emp;
	DECODE	类似if else 	SELECT ENAME,DECODE(JOB,'CLERK','BANSHIYUAN','SALESMAN','XIAOSHOU') FROM EMP;
简单连接：
	select 两个表得字段 from tab1,tab2;
别名：
	如果为表指定了别名，那么不能再使用实际表名
多表查询时笛卡儿积不可避免，数据量大时勿用。
cross join：	select * from dept cross join emp;
	交叉连接，用于产生笛卡儿积
natural join：	select * from dept natural join emp;
	自动使用相同字段消除笛卡儿积，重复内容不再显示
using:	select * from dept join emp using(deptno);
	如果有多个相同字段，使用using指定字段
on:	select * from emp e join salgrade s on(e.sal between s.losal and s.hisal);
	如果没有关联字段则可以使用on字句设置条件
外连接：left join / right join / full join #sql1999
union:
	连接查询结果，所查字段必须相同，结果相同只显示一次；
union all:
	显示所有结果，包括相同的；
intersect:
	只显示相同部分，属于交集；
minus:
	第一个查询结果减去第二个查询结果，属于差集；
exists:
	select * from hn where exists(select 子句)；
	子句返回一行或多行为true，此时执行主句
统计查询：
count;
	count(*):准确返回数据个数
	count(ziduan):不统计为null的数据个数
	count(distinct字段):统计消除重复字段后的数据个数
ANY:
	=:时与IN一样
	>或者<：范围比较，比最大值大，比最小值小
	例：select ename,sal from emp where sal > any(select sal from emp where ename='SMITH');
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Oracle
启动：
	sqlplus /nolog       #用system身份登录
	conn / as sysdba   #切换为超级管理员sys用户
	startup			   #启动实例
	quit			   #退出
	lsnrctl start      #启动监听
上下键乱码：
	安装readline：yum install readline*
	下载rlwrap：https://pan.baidu.com/s/1kVn1krX
	安装rlwrap: 
		1）tar -zxvf rlwrap-0.30.tar.gz
		2）cd rlwrap-0.30  
		3)./configure  
		4)make  5)make install
	设置alias:vim /home/oracle/.bash_profile
		alias sqlplus='rlwrap sqlplus'
		alias rman='rlwrap rman'
关闭：
	lsnrctl stop
	sqlplus /nolog
	shutdown immediate
	quit
登录:
	1 sqlplus 
	2 sqlplus /nolog
	3 sqlplus name/mima
更换用户：#超级管理员 sys(as sysdba) #普通管理员 system 
		  #普通用户 scott  		     #大数据用户 -/-	
	conn name/mima 如果是sys用户，需要加上 as sysdba;
	例如：sqlplus->sys as sysdba->密码->登陆成功
		或 conn sys as sysdba/密码；
调用系统命令：
	HOST 命令 
格式化：
	set linesize 300;--全局
	set pagesize 30;--全局
	COL 列名 FOR An(宽度) --单列
查看当前登录的用户的表:
  	select table_name from user_tables;
ed: Windows下
	ed name 自动寻找name.sql导入
	@name 导入
NOT IN 里面有NULL：not in (xx,xx,null)
	无返回值
虚拟表：#不需要查表时必须用
	dual
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
PL/SQL：程序设计语言
基本结构：
	DECLARE
		-- 声明一些变量、常量、用户定义的数据类型以及游标等
	BEGIN
		-- 主程序体
	EXCEPTION
		-- 异常处理程序，出错时执行这部分
	END;-- 主程序体结束
注释：
	单行 -- 
	多行 /* */
数字类型：
	NUMBER PLS_INTEGER BINARY_INTEGER
字符类型
	VARCHAR2 CHAR LONG NCHAR NVCHAR2(后两种PL/SQL8.0以后)
日期类型：
	DATA
布尔类型：
	BOOLEAN
定义常量：
	<常量名>constant<数据类型>:=<值>;
	例：score constant INTEGER:=60
定义变量：
	<变量名><数据类型>[(宽度):=<初始值>];
	例：address varchar2(20):'henan';
自动初始化：
	未初始化变量PL/SQL自动初始为NULL
控制结构：
	if...then...elsif...then...end;//elsif中间没有e
	case...when...then...when...then...end;
	loop if a>5 then exit;
		end if;
		a:=a+1;
		end loop;
	loop exit when a>5 a:=a+1 end loop;
	while a<5 loop a:=a+1 end loop;
	for a in 0...5 loop NULL;
		END LOOP;
	GOTO LABLE;
游标：
	PL/SQL执行SELECT、INSERT、UPDATE、DELETE时，Oracle在内存中为其分配上下文区，
	游标是指向该缓冲区的一个指针
显式游标：
	用户声明和操作
	1.声明游标
		CURSOR <游标名> IS SELECT<语句>
	2.打开游标
		OPEN <游标名>
	3.提取游标
		FETCH <游标名> INTO <变量列表>;
	 或 FETCH <游标名> INTO PL/SQL 记录;
	4.关闭游标
		CLOSE <游标名>
隐式游标：
	Oracle自动声明和操作
	begin
	select a into b from tab where id=6;
	end;
游标属性：
	%ISOPEN
	%FOUND
	%NOTFOUND
	%ROWCOUNT
游标变量：
	声明：REF type
	定义：TYPR<类型名>IS REF CURSOR  RETURN <返回类型>;
	打开：OPEN<游标变量>FOR<select 语句>
过程：
	











