IPC：
	IPC的服务器和客户总是运行在同一个主机上
可重入编译选项：
	-D_REENTRANT
四个主要领域：
	消息队列(管道、FIFO、消息队列)
	同步(互斥锁、条件变量、读写锁、信号量)
	共享内存区(匿名、有名)
	过程调用(Solatis门、SunRPC)
Posix IPC:
	Posix消息队列  ：可以任何模式打开
	Posix信号量    ：任何操作都需要读写模式
	Posix共享内存区：不能以只写模式打开
System V IPC:
	System V消息队列  ：可以任何模式打开
	System V信号量    ：任何操作都需要读写模式
	System V共享内存区：不能以只写模式打开
管道和FIFO(有名管道)
	//都使用read和write进行数据读写
	//内核为管道和FIFO维护一个计数器，可随时调用函数unlink，尽管该函数从文件系统中删除了指定路径的文件，
	//但是先前已经打开的，现在仍在打开着的描述符却不受影响
	//但其他IPC并不存在这样的计数器，例如一端向消息队列写入数据后删除该队列，另一端从队列中读信息，队列可能已经消失了
	管道：
		只能在亲缘进程间使用
		单向数据流
		可创建两个管道，以支持双向读写需求
		#include<unistd.h>  //管道维护在内核中
		int pipe(int fd[2]);//读fd[0],写fd[1]
		FILE* popen("命令行命令",const char*type);
		type:r 读命令行的标准输出
		     w 写命令行的标准输入//对标准错误没有处理
		在所有进程都关闭时就消失了。
    FIFO：
        只能在单台主机上使用，同一主机的不同文件系统也不行(例如NFS安装的网络文件系统)
    	单向半双工(要么打开是来读的，要么打开是要写的，不能既读又写)
    	从头端读数据，在尾端写数据//调用lseek，返回ESPIPE错误
    	int mkfifo(const char* pathname,mode_t mode);
    	mode隐含O_CREATE|O_EXEC//要么创建新的，要么返回已存在错误
    	如果当前尚且没有任何进程打开某个FIFO来写，那么打开这个FIFO来读就会一直阻塞
    	没有读，去写，内核会产生一个SIGPIPE，默认行为就是终止该进程，如果忽略该信号，write会返回一个EPIPE错误
    	如果向某个没有为读打开的管道写入数据，那么返回SIGPIPE错误
    	可直接在shell中使用mkfifo命令
    	需要调用unlink才会删除，对应文件系统中的一个文件，非亲缘进程可通信
消息队列：
	区别：
		Posix消息队列读总是返回最高优先级的最早消息(取消息指定优先级没有用)，System V可返回任意指定优先级的消息
		当向空的Posix消息队列放入消息时允许产生一个信息或启动一个线程，System V无此机制
	相同：
		有边界
	至少随内核，但如果是通过内存映射文件实现的，那么随文件系统，但这不是必须的。
	当一个消息队列的引用计数大于0的时候就可以删除这个名字，但该消息队列的析构要等到最后一个mq_close发生时才进行。
		









