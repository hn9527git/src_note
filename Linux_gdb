调试
strace:
	strace ./a.out #显示系统调用过程
	strace -c ./a.out 显示统计信息
	默认输出设备是STDERR
	strace -T ./a.out 显示调用时间
	strace -p pid 追踪任意进程
内存泄漏检查工具使用：读作：外奥各润特
	valgrind --tool=memcheck --leak-check=full --show-reachable=yes --trace-children=yes   ./a.out
	    --tool=memcheck默认选项，标识使用memcheck工具
		--leak-check=full指的是完全检查内存泄漏，
		--show-reachable=yes是显示内存泄漏的地点
		--trace-children=yes是跟入子进程。
		如果程序是会正常退出的程序，那么当程序退出的时候valgrind自然会输出内存泄漏的信息。如果程序是个守护进程
		我们只要在别的终端下杀死memcheck进程 #killall memcheck
gdb:
	编译时加上 -g 否则看不见程序的函数名，变量名
	启动：gdb a.out 或 gdb a.out core 或gdb a.out 1234（进程ID）
	set agrs 1 2 3 :设置main函数的参数，通常gdb进去时就设置，在run和start之前即可
	或
	run 1 2 3：设置main的参数
	l(list):列出源码
	b 15: 在15行设置断点
	b func:在函数func处设置断点
	b xx.cpp:20  :在某个文件的第20行设置断点
	start:从第一行开始执行
	until 10:执行到某一行停下
	continue:继续往下执行
	s(step):进入函数，单步调试
	finish:退出函数
	info b (break):查看断点信息
	info inferiors:查看进程信息
	b if i=x:在循环或递归时设置参数等于x时停下//条件断点
	r(run):运行
	display i:之后每步执行都会打印i的值
	undislpay x:取消，使用编号
	n(next):单句执行
	p i:打印相关值
	set 变量 值 :设置变量的值
	ptype x:打印x的类型
	bt:查看函数的堆栈
	where: 查看函数堆栈
	frame：切换栈帧
	set follow-fork-mode chlid//跟随子进程
	set follow-fork-mode parent//跟随父进程
	q:结束调试
线程相关：
	可通过pstree -p 主线程ID 查看各个线程的关系
	gdb attach 主线程id:调试某个线程
	info threads:查看所有线程，会显示内部的ID
	thread ID:切换到指定线程
	thread apply ID n:继续使某一线程运行
	set scheduler-locking on:只运行当前线程  off:默认所有线程并发执行
生成反汇编文件：
	objdump -dS a.out > out
gdb分析coredump文件：#该文件为服务不能正常响应时的操作系统信息的快照
	使用：gdb a.out core.test.13093
		直接显示在有问题的那一行
	或 gdb a.out
	   执行run//运行到出错的地方
	where 显示调用过程
用gdb查看内存
	格式: x /nfu <addr>
	说明
	x 是 examine 的缩写
	n表示要显示的内存单元的个数
		可自己指定
	f表示显示方式, 可取如下值
		x 按十六进制格式显示变量。
		d 按十进制格式显示变量。
		u 按十进制格式显示无符号整型。
		o 按八进制格式显示变量。
		t 按二进制格式显示变量。
		a 按十六进制格式显示变量。
		i 指令地址格式
		c 按字符格式显示变量。
		f 按浮点数格式显示变量。
	u表示一个地址单元的长度，可取值：
		b表示单字节，
		h表示双字节，
		w表示四字节，
		g表示八字节
	Format letters are o(octal), x(hex), d(decimal), u(unsigneddecimal),
	t(binary), f(float), a(address), i(instruction), c(char) ands(string).
	Size letters are b(byte), h(halfword), w(word), g(giant, 8bytes)
	举例
		x/3uh buf
		表示从内存地址buf读取内容，
		h表示以双字节为一个单位，
		3表示三个单位，
		u表示按十六进制显示
查看core文件生成位置：
	cat /proc/sys/kernel/core_pattern
查看core文件头信息：
	readelf -h core.*
查看core大小限制：
	ulimit -c
	ulimit -c [size] //修改
top:
	当前时间：运行时间：运行用户数：负载(1min,5min,15min)
	进程总数：运行总数：睡眠总数：停止总数：僵尸总数
	用户CPU：内核：变优先级：空闲：io：硬中断：软中断：虚拟
	物理内存 总量：使用：空闲：内核缓存
	交换 总量：使用：空闲：缓冲的交换区总量
	进程号：运行用户：优先级：任务值：虚拟内存：物理内存：共享内存：状态：CPU占比：物理内
			存占比：累计占CPU时间：命令
进程的5种状态：
	1）运行2）中断3）不可中断4）僵死5）停止
ps:
	标识：
		D：不可中断
		R：运行
		S：中断
		T：停止
		Z：僵死
其他状态还包括
		W:无驻留页
		<:优先级高的进程
		N:优先级较低的进程
		L:有些页被锁进内存
		s:进程的领导者
		l:多进程的
		+:位于后台的进程组