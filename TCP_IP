-------------------------------------基础、结构、函数--------------------------------
计算机网络中的硬件	
	路由器：根据IP转发信息
	集线器: 将局域网中的多台计算机连接到一起，广播型连接
	中继器：加强传输的信号，使之传输的更远
	交换机：高级集线器，可点对点连接（mac地址）
	网关：两个不同网络之间的翻译
	网桥：连接两个不同的网络
IP:  IPV4
	4个字节32位开头为：
	0：A类地址0-127
	10：B类地址128-191
	110：C类地址192-223
端口号：
	0-65535都可
	0-1023是知名服务端口号不能重复
	所有知名服务使用的端口都定义在/etc/services文件中；
	TCP和UDP套接字不会共用端口号，所以允许二者相重复。
ARP协议：
	实现任意网络层地址到任意物理层地址的转换
	工作原理：主机向自己所在的网网络广播一个ARP请求，该请求包含目标机器的网络地址，此网络上的所有机器都将接收到这个请求，
	但只有被请求的目标机器会回应一个ARP应答，其中包含自己的物理地址。
TCP：
	MSS、窗口扩大因子选项都只出现在同步报文段中
C/S模型：
	优点：缓存大量数据、速度快
	缺点：安全性差、不能跨平台、开发工作量大
B/S模型：
	优点：安全性高，可以跨平台、开发工作量小
	缺点：不能缓存大量数据、严格遵守http
地址信息结构体：
	struct sockaddr_in
	{
		sa_family_t		sin_family; //地址族
		uint16_t		sin_port;	//16位TCP/IP端口号（网络字节序）
		struct in_addr 	sin_addr;	//32位IP地址（同上）
		char			sin_zero[8];//不使用
	}
	struct in_addr
	{
		in_addr_t 		s_addr;		//32位IPv4地址
	}
	bind函数第二个参数期望得到sockaddr结构体
	struct sockaddr
	{
		sa_family_t 	sin_family;
		char 			sa_data[14];//地址信息
	}
	其中sa_data[14]，保存的地址信息需要包含IP地址和端口号，剩余补充0，非常麻烦，
	所以有了新的结构体sockaddr_in
字节序转换:
	unsigned short htons(unsigned short);//h代表（host）字节序
	unsigned short ntohs(unsigned short);//n代表（network）字节序
	unsigned long  htonl(unsigned long); //s代表short
	unsigned long  ntohl(unsigned long); //l代表long
	不管大小端全部转换为网络字节序（大端模式）
网络地址转换：
	sockaddr_in中保存的地址信息的成员为32位整形数，为了分配IP地址，需要转换为
		32位整数形数据。即192.168.61.129转换为32位1或0；
	in_addr_t(unsigned long) 
	inet_addr(const char * string);成功返回32位大端序整数型数。
	int inet_aton(const char * string, struct in_addr * addr);直接存入addr中，常用。
	将整数型IP地址转换为点分十进制字符串的函数：
	char * inet_ntoa(struct in_addr adr);成功返回转换的字符串地址值失败返回-1.
socket
	是对网络底层的一个封装，可以看成一个文件。
	<对方IP，对方PORT,本地IP，本地PORT>
	ip：找到这个网络节点
	port：用来识别该网络节点上的某个应用
C/S准备工作异同:
	服务端：请把IP192.168.61.129 端口2222的数据传给我。
	客户端：请连接到IP192.168.61.129 端口22222.
	服务器端的准备工作通过bind函数完成
	客户端的准备工作通过connect函数完成。
	服务端的sockaddr_in结构体初始化为服务器端IP和套接字的端口号，然后bind；
	客户端的sockaddr_in结构体初始化为要与之连接的服务器端套接字的IP和端口号，然后connect；
INADDR_ANY:
	自动获取运行服务端的计算机IP地址。一般用于服务端。！
方式
	SOCK_STREAM:使用TCP协议，可靠传输
	SOCK_DGRAM:使用UDP协议，不可靠协议
	SOCK_RAW:需要手动封装和解析，可以读取内核没有处理的IP数据包
基于TCP的C/S架构模型
	客户端：socket->connect->write||read->close;
	服务端：socket->bind->listen->accept->read | write->close;
	服务端的accept函数需早于客户端的connect函数
read函数返回值：
	>0:读到数据
	0：读到结尾，对端已关闭
	-1：
		errno= EAGAIN 或 EWOULDBLOCK 设置了非阻塞读，但是没有数据
		errno= EINTR 慢速系统调用被中断,需要重启
		errno= ECONNRESET 说明连接被重置，需要close，移除监听队列
		errno= 其他情况 发生异常
注意：
	内核常用C语言知识 ：
	\续行符		
	##连接前后两个参数	
		例#define SIGN(x) INT_##x 
			int SIGN(1);//展开后为int INT_1;
	#把一个符号转变为字符串
		例#define STR(x) #x
			char * str=STR(test_string);
	内存对齐：
		#pragma pack(n) //n=1,2,4,8,16
出错信息获取：
	（1）全局变量errno
	（2）函数strerror(errno)，获取错误信息
	（3）gai_strerror(error),//用于错误不存在错误码errno的情况
	（4）getsockopt(int sockfd,int level,int optname,void * optval,socklen_t * optlen);//第三个参数为SO_ERROR时，获取错误码
------------------------服务器端TCP------------------------------------------------------------

	socket(AF_INET,SOCK_STREAM,0);
	类型--seraddr_in.sin_family=AF_INET;
	地址--seraddr_in.sin_addr.s_addr=inet_addr("192.168.57.129")--点分ip转整数
	端口--seraddr_in.sin_port=htons(8888);--本地转换网络字节序（大小端）
	未用--bzero(seraddr.sin_zero,8);
	bind(sockfd,(struct sockaddr *)&seraddr,sizeof(seraddr));
	listen(sockfd,20);--定义连接队列数20
	while(1)
	--连接的客户端信息存在clientaddr结构体中
	--创建线程进行读写
	{sock=accept(sockfd,(struct sockaddr *)&clientaddr,&ilen}
创建接电话连接过程：
1.socket函数创建套接字（安装电话机）
	int socket(int domain,int type,int protocol);-- 返回描述符
		-- domain:套接字使用的协议族信息。
			AF_INET代表IPv4互联网协议族。
			AF_INET6代表IPv6互联网协议族。
		-- type:套接字数据传输类型信息。
		SOCK_STREAM代表面向连接的套接字(TCP)，需要建立一对一的连接，
			数据无边界，发送数据存内部缓冲，
			可一次读完也可多次读完。强调有效顺序完整。丢失或损毁都重传。
		SOCK_DGRAM代表面向消息的套接字(UDP)，强调快速而非顺序，
			传送数据可能丢失或损毁，有数据边界，限制每次传输的数据大小。
		-- protocol:计算机通信中使用的协议信息。
			一般为0，除非同一协议族中存在多个数据传输方式相同的协议。
2.bind函数分配IP地址和端口号（分配电话号码）
	int bind(int sockfd,(struct sockaddr *)myaddr,socklen_t addrlen);-- 返0
		-- sockfd:要分配地址信息的套接字文件描述符
		-- myaddr:存有地址信息的结构体变量地址值
		-- addelen:第二个结构体变量的长度
3.listen函数转可接收请求状态（连线使之可以接听）（创建门卫，使客户端请求有序连接）
	int listen(int sockfd,int backlog);-- 返0 
		-- sockfd：希望进入等待连接请求状态的套接字文件描述符--》服务器端套接字
		-- backlog：连接请求等待队列的长度。定义队列中最大连接数
	本函数创建的门卫套接字一直处于监听状态。若有连接请求加入请求队列中。
4.accept函数受理连接请求（电话铃响拿起接听）
	int accept(int sockfd,struct sockaddr *addr,socklen_t *addrlen);返描述符。
		-- sockfd：服务器端套接字的文件描述符
		-- addr:用来保存发起请求的客户端信息的变量地址值
		-- addrlen:用来保存客户端地址长度。
	本函数使用服务端套接字，客户端地址信息，内部产生用于数据I/O的套接字(返回值)。
	这个套接字是自动产生的，自动与客户端连接，用于传输数据。
	若非指定为非阻塞式，则此函数一直阻塞等待连接。
	
------------------------客户端TCP----------------------------------------------------------

	--AF_INET:IPV4
	--SOCK_STREAM:基于TCP
	--0;参数二的默认协议
	socket(AF_INET,SOCK_STREAM,0);
	类型--seraddr_in.sin_family=AF_INET;
	端口--seraddr_in.sin_addr.s_addr=inet
	_addr("192.168.57.129")--点分ip转整数
	地址--seraddr_in.sin_port=htons(8888);--本地转换网络字节序（大小端）
	未用--bzero(seraddr.sin_zero,8);
	connect(sockfd,(struct sockaddr *)&seraddr,sizeof(seraddr));
	创建线程--一个读，一个写
创建打电话过程：
1.socket函数创建套接字（安装电话机）
	int socket(int domain,int type,int protocol);-- 返回描述符
		此函数同服务器端
2.connect函数发送连接请求（打电话）
	int connect(int sockfd,struct sockaddr *serv_addr,socklen_t addrlen);-- 返0
		-- sockfd：客户端套接字文件描述符，调用成功则用于数据传输
		-- servaddr: 保存目标服务器端地址信息的变量地址值。
		-- addrlen: 以字节为单位传递已传递给第二个结构体参数的地址值变量长度。
	何时返回:
		1.服务器端接受连接请求(服务端把连接请求信息记录到等待队列，因此返回后不一定
			立即进行数据交换)
		2.发生断网等异常情况而中断连接请求
客户端地址信息分配信息：
	何时：调用connect函数
	何地：操作系统(内核)
	如何：IP用客户机IP，端口随机
	客户端的IP地址和端口在调用connect函数时自动分配，无需调用标记的bind函数进行分配。
	
------------------------TCP------------------------------------------------------------
协议栈：
		   应用层
		|			|
	  TCP层       UDP层
		|			|
	        IP层
			  |
			链路层
链路层：
	LAN：局域网	
	WAN：广域网	
	MAN：
IP层:
	解决向目标传输数据的路径，面向消息的、不可靠的协议，如果传输发生路径错误，则选择其他路径，
		但如果发生数据丢失或错误，则无法解决。
TCP/UDP层:
	以IP层提供的路径信息为基础完成实际的数据传输，故该层又称为传输层。
	TCP在数据交换过程中可以确认对方已收到数据，并重传丢失的数据。给不可靠的IP协议赋予可靠性。
应用层:
	前三层是套接字通信过程中自动处理的。需要根据程序特点决定服务器端和客户端之间的数据
		传输规则，这便是应用层协议。
	网络编程的大部分内容便是设计并实现应用层协议。
缓冲：
	I/O缓冲在每个TCP套接字中单独存在。
	I/O缓冲在创建套接字时自动生成。
	即使关闭套接字也会继续传递输出缓冲中遗留的数据。
	关闭套接字将丢失输入缓冲中的数据。
TCP套接字从创建到消失过程：
	与对方套接字建立连接
	与对方套接字进行数据交换
	断开与对方套接字的连接
三次握手:
	主机A                     主机B
	SYN              //SYN:1000代表现在传递的数据包序号为1000，如果接受无误请通知我，然后我向你传递1001号数据包
	[SEQ:1000 ACK:-] //ACK为空
	---------------------------->        
							SYN+ACK //SYN:现传递的数据包序号为2000，如果接收无误，请通知我向你传递2001号数据包
				[SEQ:2000 ACK:1001] //ACK:刚才传输的SEQ为1000的数据包接受无误，请传递SEQ为2001的数据包
	<----------------------------
	ACK
	[SEQ:1001 ACK:2001] //已正确收到SEQ：2000的数据包，现在可以传输SEQ为2001的数据包
	---------------------------->
	套接字是以全双工方式工作的
	ACK的增量是传输的数据字节数：ACK=SEQ+传递的字节数+1
	若传输包后在规定时间内没有接收到主机B的回复，则重新发送该数据包
四次挥手：
	主机A                     主机B
	FIN
	[SEQ:5000 ACK -]
	---------------------------->
                              ACK
			  [SEQ:7500 ACK:5001]
	<----------------------------
							  ACK
			  [SEQ:5001 ACK:7502]
	<----------------------------
	FIN
	[SEQ:7501 ACK:5001]
	---------------------------->


	向主机A传递了两次ACK5001，原因：主机A接受ACK消息后未接受数据而重传的
------------------------tcpdump 查看三次握手和四次挥手以及数据通信过程-----------------
1、启动服务器
	例如 nc -l -p 8888
2、启动查看窗口
	tcpdump -i any -nn -S tcp and port 8888
3、启动客户端进程进行连接
	例如 nc 127.0.0.1 8888
FIN：
	表示连接断开
ACK:
	确认应答
SEQ：
	数据包序号，ISN+1用来标识每一个字节的，但是同步或结束报文段即使没有携带数据，也要占用一个seq
SYN：
	连接请求
win:
	接收通告窗口大小
options:
	TCP选项
mss:
	发送端通告的最大报文段长度
sackOK:
	标识发送端支持并同意使用SACK选项
TS val:
	发送端的时间戳
ecr:
	时间戳回显应答
nop:
	空操作
wscale:
	窗口扩大因子值
---------------------------------------------------------------------------------------
TCP:
	优点：稳定，数据流量稳定、速度稳定、有顺序
	缺点：传输速度慢、开销大
	使用场景：对数据的完整性要求较高，不追求效率，大数据传输、文件传输
UDP：
	优点：传输速度快、开销小
	缺点：不稳定、无顺序性
	使用场景：对时效性要求高、稳定性其次，游戏、视频。
------------------------UDP------------------------------------------------------------
不可靠的数据传输服务，IP让离开主机的UDP数据包准确传递到目标主机，但把UDP包最终交给
	目标主机的UDP套接字的过程则是由UDP完成的。UDP最重要的的作用就是根据端口号将传到
	主机的数据包交付给最终的UDP套接字。
优点：
	结构简单
	性能比TCP高
	编程实现简单
数据传输过程：
	服务器：socket()-->bind()--> 【recvfrom()-->sendto()】 -->close()
	客户端：socket()--> 【sendto()-->recvfrom() 】 -->close()
	UDP的服务器端和客户端不需要连接，没有listen函数和accept函数过程
	只有创建套接字的过程和数据交换过程。
	TCP中，套接字是一对一的，若要向是个客户端提供服务，除了守门的服务端套接字，还需要
		是个服务端套接字。
	UDP中，不管是服务器端还是客户端都只需要一个套接字。
	UDP套接字每次传输数据都需要添加目标地址信息。
	udp_server:socket-->bind-->循环(接收-->发送)
	udp_client:socket-->循环（输入-->发送-->接收-->输出）
相关函数：
	发送数据函数：
	ssize_t sendto(int sock,void *buff,size_t nbytes,int flags,
					struct sockaddr *to,socklen_t addrlen);
		-- sock :用于传输数据的UDP套接字文件描述符
		-- buff :保存待传输数据的缓冲地址值
		-- nbytes :待传输的数据长度，以字节为单位
		-- flags :可选项参数，若没有则传递0
		-- to :存有目标地址信息的sockaddr结构体变量的地址值
		-- addrlen :传递给参数to的地址值结构体变量长度
		调用过程：
			1.向UDP套接字注册目标IP和端口号
			2.传输数据
			3.删除UDP套接字中注册的目标地址信息
	接受数据函数：
	ssize_t recvfrom(int sock,void *buff,size_t nbytes,int flags,
						struct sockaddr *from,socklen_t *addrlen);
		-- sock :用于接收数据的UDP套接字文件描述符
		-- buff :保存接受数据的缓冲值
		-- nbytes :可保存的最大字节数，故无法超过参数buff所指的缓冲大小
		-- flags :可选项参数，若没有则传递0
		-- from :存有发送端地址信息的sockaddr结构体变量的地址值
		-- addrlen :保存参数from的结构体变量长度的变量地址值
必须保证UDP通信过程中使I/O函数调用次数保持一致
UDP客户端套接字的地址分配:
	调用sendto函数时自动分配IP和端口号。
	TCP套接字中需要注册待传输数据的目标IP和端口号，而UDP中则无需注册。
UDP套接字：
	已连接UDP套接字：
		注册了目标地址信息//发送接收都可使用connect注册地址信息，就可以使用write或read函数了，或recvfrom和sendto不再需要地址信息。
	未连接UDP套接字：
		未注册目标地址信息，使用recvfrom和sendto每次重新绑定地址信息。
	要与同一主机进行长时间通信，将UDP套接字变成已连接套接字会提高效率
	创建已连接UDP套接字:
		调用connect函数为套接字注册目标地址信息!!!
------------------------套接字断开------------------------------------------------------------
直接断开：调用close();
	断开端无法接受别的主机传输的数据，实际是完全无法调用接收数据相关的函数。
套接字和流：
	一个连接有两个流：一个输入流，一个输出流 才能完成数据交换
	可以优雅的断开其中一个流。
半关闭函数：
	int shutdown(int sock,int howto);
		-- sock :需要断开的套接字文件描述符
		-- howto (SHUT_RD | SHUT_WR | SHUT_RDWR)：传递断开方式信息
	为何需要半关闭函数:
		主机A-->给我传某文件-->主机B
		   <-----文件传输中------
		   -------谢谢----------->
	其中谢谢是多余的，只是用来模拟客户端断开连接前还是数据需要传输的情况
	约定一个传输文件结束符EOF:目的告诉对方数据已经传输完毕
	当断开输出流时向对方主机传输EOF，但如果调用close函数则对方接受不到EOF信号，
	此时需要调用shutdown函数，关闭输出流，这样服务端既可以发送EOF，同时又保留了输入流。
--------------------------滑动窗口--------------------------------------------------------------------
解决发送端接收端速度不匹配，可能造成数据丢失的问题，即TCP流量控制
通信时服务端和客户端互相发送WIN(4096) ，即指定缓冲区大小
十六位窗口大小，即最大为65535
------------------------域名与网络地址------------------------------------------------------------
DNS:
	是对IP地址和域名进行相互转换的系统，核心是DNS服务器
域名：
	用容易记忆和表述的域名来替代非常难记的IP地址。
域名获取IP函数：
	struct hostent * gethostbyname(const char * hostname);
		-- hostname：域名
	struct hostent
	{
		char * h_name; 		//官方域名
		char ** h_aliases  	//其他域名
		int h_addrtype; 	//地址类型
		int h_length;		//地址长度
		char ** h_addr_list;//IP，可能有多个用来负载均衡
	}
IP获取域名函数：
	struct hostent * gethostbyaddr(const char * addr,socklen_t len,int family);
		-- addr:含有IP地址信息的in_addr机构体指针，为了将来兼容IPv6，
			不是void*(因为当时void指针标准化还未定义)
		-- len:向第一个参数传递的地址信息字节数，IPv4时为4，IPv6时为16
		-- family:传递地址族信息，IPv4时为AF_INET，IPv6时为AF_INET6
------------------------套接字可选项与IO缓冲大小------------------------------------------------------------
//套接字类型只能在创建时指定，之后不能再修改
读取套接字可选项：
	int getsockopt(int sock,int level,int optname,void *optval,socklen_t *optlen);
		--sock :用于查看选项套接字文件描述符
		--level :要查看的可选项的协议层
		--optname :要查看的可选项名
		--optlen :向第四个参数optval传递的缓冲大小，该变量中保存通过第四个参数返回的
				可选项调用的函数。
	int setsockopt(int sock,int level,int optname,const void *optval,socklen_t optlen);
		--sock :用于更改可选项的套接字文件描述符
		--level ：要更改的可选项协议层
		--optname ：要更改的可选项名
		--optval ：保存要更改的选项信息的缓冲地址值
		--optlen :向第四个参数optval传递的可选项信息的字节数
(,SOL_SOCKET,XXXX,)
	XXXX为SO_TYPE:
		获得套接字类型
	为SO_SNDBUF:
		获得套接字发送缓冲大小
	为SO_RCVBUF:
		获得套接字接收缓冲大小
更改缓冲大小：
	int snd_buf=1024*4,rcv_buf=1024*8;
	setsockopt(sock,SOL_SOCKET,SO_RCVBUF,(void *)&rcv_buf,sizeof(rcv_buf));
	setsockopt(sock,SOL_SOCKET,SO_SNDBUF,(void *)&snd_buf,sizeof(snd_buf));
Time-wait:
	先传输FIN消息的主机应经过此过程。
	客户端的此状态无需考虑，因为客户端套接字的端口号是任意指定的。
	此状态下无法分配套接字端口号。
	修改使其可以：
		int option;
		optlen=sizeof(option);
		option=TRUE;
		setsockopt(serv_sock,SOL_SOCKET,SO_REUSEADDR,(void *)&option,optlen);
Nagle算法：
	只有收到前一数据的ACK消息，Nagle算法才发送下一条数据
	一般情况下，不使用Nagle算法会对网络流量产生负面影响，但传输大文件时，
		不使用此算法较快。
	禁用：
		int opt_val=1;
		setsockopt(sock,IPPROTO_TCP,TCP_NODELAY,void *)&opt_val,sizeof(opt_val));
	查看状态：
		int opt_val;
		socklen_t opt_len;
		opt_len=sizeof(opt_val);
		getsockopt(sock,IPPROTO_TCP,TCP_NODELAY,(void *)&option,&opt_len);
	0:表示正在使用Nagle算法
	1:表示禁用Nagle算法
----------------------多进程服务器端-----------------------------------------------
多进程服务器：通过创建多个进程提供服务
多路复用服务器：通过捆绑并统一管理I/O对象提供服务
多线程服务器：通过生成与客户端等量的线程提供服务
进程：
	创建：
	pid_t fork(void);//返回进程ID，失败返回-1;
	//调用fork后要将无关的套接字文件描述符关掉，一个套接字可能对应多个套接字文件描述符(父子进程复制的)只有全部关闭，套接字才会关闭。
	如果子进程没有退出或返回(exit,_exit,return等)，则继续向下执行代码！
	如果父进程先于子进程返回，则子进程被init进程回收！
	如果子进程先于父进程返回，而父进程没有回收子进程且没有退出时，则子进程为僵尸进程，父进程退出时，父子进程都被系统回收！
产生僵尸进程：
	子进程结束时将返回值发回给父进程，而父进程没有调用wait等函数接收时，该子进程成为僵尸进程。
僵尸进程：
	1.传递参数并调用exit函数
	2.main函数中执行return语句并返回值
	向exit函数传递的参数值和main函数的return返回值都会传递给操作系统，而操作系统不会
		销毁子进程，直到把这些值传递给产生该子进程的父进程。该状态下的进程为僵尸进程
	何时销毁：
		应该向创建子进程的父进程传递子进程的exit参数或return返回值。
	销毁函数：
		1 pid_t wait(int * status);//返回终止的子进程ID，失败返回-1
			-- 阻塞等待子进程终止
			调用此函数时如果已有子进程终止，那么终止时传递返回值将保存到该函数的参数所指
			内存空间。但信息较多，需要用宏进行分离。
			WIFEXITED(status)：子进程正常终止时返回真
				再用WEXITSTATUS(status):返回子进程的返回值
			WIFSIGNALED(status):子进程异常终止为真
				再用WTERMSIG(status):取得使子进程终止的信号编号（不能得到名字）
			WIFSTOPPED(status):子进程暂停为真
				再用WSTOPSIG(status)：取得使子进程暂停的信号编号
		例如：
			if(WIFEXITED(status))
			{
				puts("正常终止");printf("终止值：%d",WEXITSTATUS(status));
			}
		2 pid_t waitpid(pid_t pid,int * statloc,int options);//返回终止子进程ID或0，失败返回-1
			-- pid:等待终止的目标子进程的ID，若传递-1，则等同于wait函数（等待任意子进程）
			-- pid>0:等待id=pid的子进程
			-- pid==0:等待组id=调用进程的组ID的任一子进程
			-- pid<-1:等待其组ID=pid的绝对值的任一子进程
			-- statloc:接受信息
			-- options:传递头文件中的声明的常量WNOHANG，即使pid子进程没有结束也不会进入阻塞，返0退出
						WUNTRACED：支持作业控制
			-- 默认阻塞等待信号的到来或子进程结束
wait3和wait4函数：
	pid_t wait3(int status,int options,struct rusage *rusage);
		-- wait()函数进阶版，返回资源信息结构体
			包括用户CPU时间总量、系统CPU时间总量、缺页次数、接收到信号次数等
	pid_t wait4(pid_t pid,int status,int options,struct rusage *rusage);
		-- waitpid()函数进阶版，返回资源信息结构体
竞态条件：
	当多个进程都企图对共享数据进行某种处理，而最后的结果又取决于进程运行的顺序时。
信号处理：
	父进程往往与子进程一样繁忙，因此不能之调用waitpid函数以等待子进程终止，所以向操作系统求助
		由操作系统告诉父进程子进程的终止，此时父进程暂时放下工作去处理子进程终止相关事宜。
	信号注册：
		进程：向操作系统申请，若我的子进程结束就调用XXXX函数(需要提前写好)
		操作系统：收到申请，
	void (*signal(int signo,void (*func)(int)))(int);//UNIX操作系统中可能存在区别
		-- 在产生信号时调用，返回之前注册的函数指针
		-- signal ：函数名
		-- int signo,void (*func)(int) ：参数
		-- 返回void型参数为int的函数指针，是之前的信号处理函数
	调用时，第一个参数为信号，第二个参数为信号发生时将要调用的函数地址值
		例如：signal(SIGINT,handler);
		--handler:为SIG_ING代表忽略，为SIG_DFL代表默认处理，也可以为自定义处理函数的指针
	alarm函数：
	unsigned int alarm(unsigned int seconds);
		-- seconds秒后发出SIGALRM信号
	发生信号时将唤醒由于调用sleep函数而进入阻塞状态的进程，即使睡眠时间并未到期，而且不会再次睡眠，相当于跳过后面的睡眠时间（P169），信号处理函数执行后返回
		跳过当前阻塞状态。
	int sigaction(int signo,const struct sigaction * act,struct sigaction * oldact);
		-- //UNIX操作系统中完全相同
		-- //返回0，失败返回-1
		-- signo：信号
		-- oldact：通过此参数获取之前注册的信号处理函数指针，若不需要传0
		-- struct sigaction
			{
				void (*sa_handler)(int);//信号处理函数的地址值
				sigset_t sa_mask;//sigemptyset(act.sa_mask)将所有位置0//需要被屏蔽的信号
				int sa_flags;//0
			}
进程间通信：
	两个不同进程间可以交换数据，操作系统通过提供两个进程可以同时访问的内存空间来实现。
	管道：
		int pipe(int filedes[2]);//返回0，失败返回-1
			-- filedes[0] 通过管道接收数据时的文件描述符，即管道出口
			-- filedes[1] 通过管道传输数据时的文件描述符，即管道入口
			-- 读0写1，反了无效
	双向传输数据问题：
		数据进入管道后成为无主数据，若写数据后直接读会取出刚写进去的无主数据。可以sleep
------------------------I/O函数------------------------------------------------------
	ssize_t send(int sockfd,const void * buf,size_t nbytes,int flags);
		-- //返回发送的字节数，失败时返回-1
		-- sockfd:表示与数据传输对象的连接的套接字文件描述符
		-- buf:保存待传输数据的缓冲地址值
		-- nbytes:待传输的字节数
		-- flags:传输数据时指定的可选项信息。
	ssize_t recv(int sockfd,void * buf,size_t nbytes,int flags);
		-- //返回接收的字节数，收到EOF返回0，失败时返回-1
		-- sockfd:表示与数据传输对象的连接的套接字文件描述符
		-- buf:保存接收数据的缓冲地址值
		-- nbytes:可接收的最大字节数
		-- flags:接收数据时指定的可选项信息
	这两个函数的最后一个参数时收发数据时的可选项
		可选项				含义							   send		recv
		MSG_OOB			用于传输带外数据						Y		  Y
		MSG_PEEK		验证输入缓冲中是否存在接收数据					  Y
		MSG_DONTROUTE	在本地网络中寻找目的地					Y
		MSG_DONTWAIT 	调用IO函数不阻塞，用于使用非阻塞IO		Y		  Y
		MSG_WAITALL		防止函数返回，直到收到全部请求的字节数			  Y
	MSG_OOB:
		发送紧急消息，应当优先处理
	
对数据进行整合传输及发送的函数：
	ssize_t writev(int filedes,const struct iovec * iov,int iovcnt);
		-- //成功返回发送的字节数，失败时返回-1
		-- filedes ：表示数据传输对象的套接字文件描述符
		-- iov ：iovec结构体数组的地址值，包含待发送数据的位置和大小信息
		-- iovcnt :向第二个参数传递的数组长度
	struct iovec
	{
		void * iov_base;//缓冲地址
		size_t iov_len;//缓冲大小
	}
-----------------多播和广播----------------------------------------------------------
多播：//struct ip_mrep join_add;
	基于UDP完成，同时向多个主机传递数据//只向一个组发送一次数据，加入该组的用户都会收到数据，数据复制由路由器负责。
	特点：
		多播服务器端针对特定多播组，只发送一次数据
		即使只发送一次数据，但该组的所有客户端都会收到数据
		多播组数可在IP地址范围内任意增加
		加入特定组即可接收发往该多播组的数据
	多播组是D类IP地址(224.0.0.0~239.255.255.255)
	为了传递多播数据包，必须设置TTL
广播：
	只能向同一网络中的主机传送数据。
直接广播：
	IP地址除了网络地址外，其余地址全部设置为1.例如，希望向网络地址792.12.34中的所有主机传输数据时，可以向192.12.34.255传输。
	数据将传输到该网络的所有主机。
本地广播：
	使用的IP限定为255.255.255.255.例如，192.34.24网络中的主机向255.255.255.255传输数据时，数据将传送到192.34.24网络中所有的主机。
广播与默认UDP区别：
	数据通信中的IP地址是与UDP的唯一区别。默认生成的套接字会阻止广播，因此需要更改默认设置：
	//仅发送需要开启，接收不需要
	int bcast=1；
	setsockopt(send_sock,SOL_SOCKET,SO_BROADCAST,(void*)&bcast,sizeof(bcast));

----------------套接字和标准I/O------------------------------------------------------
         标准I/O                     文件I/O（系统）
打开  fopen,freopen,fdopen              open
关闭  fclose                            close
读    getc,fgetc,getchar,fgetchar       read
	  fgets,gets,fread                  
写	  putc,fputc,putchar,fputs          write
	  puts,fwrite
标准I/O函数：
	优点:
		具有良好的移植性
		可以利用缓冲提高性能
	缺点：
		不容易进行双向通信
		有时可能频繁调用fflush函数
		需要以FILE结构体指针的形式返回文件描述符
将创建的文件描述符转换为标准I/O函数中使用的FILE结构体指针
	FILE * fdopen(int fildes,const char * mode);
		-- //返回转换的FILE指针，失败时返回NULL
		-- filds:需要转换的文件描述符
		-- mode:将要创建的FILE结构体指针的模式信息
将标准I/O函数中使用的FILE结构体指针转换为文件描述符
	int fileno(FILE * stream);
		-- //返回转换后的文件描述符，失败时返回-1
		
------------------分离I/O流----------------------------------------------------------
分离流的好处：
	通过分开输入过程和输出过程降低实现难度
	与输入无关的输出操作可以提高速度
	-- 将FIFE指针按读模式和写模式加以区分
	可以通过区分读写模式降低实现难度
	通过区分I/O缓冲提高缓冲性能
文件描述符的复制和半关闭：
	dup
	shutdown:针对套接字，不管复制出多少文件描述符，都进入半关闭状态，并发送EOF
为什么需要半关闭：
	因为分离后的流需要各自关闭。。。。。。
	//例如，分离的流是复制的同一个文件描述符，一个用于读、一个用于写，假如读端读完了要关闭，
	//如果使用close(fd)直接关闭，那么写端就不能写了，所以需要半关闭。
终止流时无法半关闭的原因：
	FILE读文件指针--\
			 		文件描述符<-->套接字
	FILE写文件指针--/
	关闭任何一个FILE结构体则文件描述符就关闭，即套接字关闭
解决方案：
	复制文件描述符，这样只有销毁所有文件描述符才能销毁套接字(并非真正半关闭)
	FILE读文件指针-->文件描述符\
			 		      		<-->套接字
	FILE写文件指针-->文件描述符/
复制文件描述符的函数：
	int dup(int fildes);
	int dup2(int fildes,int fildes2);
		-- //返回文件描述符，失败返回-1
		-- fildes:需要复制的文件描述符
		-- fildes2:明确指定的文件描述符整数值
-------------------------I/O复用seelct-----------------------------------------------------
I/O复用就是单个线程通过记录跟踪每一个Sock(I/O流)的状态来同时管理多个I/O流.
	在不创建进程的同时向多个客户端提供服务	
select函数：
	调用方法：设置文件描述符->指定监视范围->设置超时->调用本函数->查看调用结果
	fd_set数组变量区分套接字,设置为1表示该文件描述符是监视对象
	fd_set操作：
		FD_ZERO(fd_set * fdset)：将fd_set变量的所有位初始化为0
		FD_SET(int fd,fd_set * fdset):在参数fdset指向的变量中注册文件描述符fd的信息
		FD_CLR(int fd,fd_set * fdset):清除文件描述符fd的信息
		FD_ISSET(int fd,fd_set * fdset):若该文件描述符是监视对象，返回真
	int select(int maxfd,fd_set * readset,fd_set * writeset,fd_set * exceptset,const struct timeval * timeout);
		-- 返回大于0的值(发生变化的文件描述符的数量)，失败返回-1
		-- maxfd:监视对象文件描述符数量
		-- readset:将所有关注“是否存在待读数据”的文件描述符注册到fd_set，并传递地址值
		-- writeset:---------“是否可传输无阻塞数据”----------------------------------
		-- exceptset:--------“是否发生异常”------------------------------------------
		-- timeout:为防止陷入无限阻塞的状态，传递超时（time-out）信息
		-- 返回值：发生错误返回-1，超时返回0，因发生关注的时间返回时，返回发生事件的文
			件描述符数
	struct timeval
	{
		long tv_sec;	//秒数
		long tv_usec;	//毫秒
	}
	select函数调用完成后，fd_set发生变化，原来为1的位均变成0，但发生变化的文件描述符
		对应的位除外，即可认为仍为1的位置上的文件描述符发生了变化
	selec每次返回都要循环所有文件描述符，可以将添加的文件描述符放在一个数组中，每次增删数据元素，只用循环数组即可。
select优点：
	可以监听多个套接字
	跨平台，几乎每个平台都提供select函数
select缺点：
（1）每次调⽤用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大
（2）同时每次调⽤用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大
（3）select支持的文件描述符数量太少了，默认是1024
基于select的I/O复用技术速度慢的原因：
	调用select函数后常见的针对所有文件描述符的循环语句
	每次调用select函数时都需要向该函数传递监视对象信息，因为套接字由操作系统管理，用户空间到系统空间的信息传递是主要负担，
	且无法通过代码优化
-----------------突破1024文件描述符设置-------------------------------------------------
cat /proc/sys/fs/file-max     //查看当前计算机所能打开的最大文件个数，受硬件影响
ulimit -n                     //显示当前用户的单个进程，默认能打开文件描述符最多个数， 缺省为 1024。
vi /etc/security/limits.conf  //设置软限制和硬限制，注销才能生效
-- 只有poll和epoll才可以突破1024限制
	select 无法突破，除非修改代码重新编译内核
-----------------poll简介---------------------------------------------------------------
int poll(struct pollfd* fds,nfds_t nfds,int timeout);
	fds:监听的文件描述符结构体数组
		struct pollfd{
			int fd;//待监听的文件描述符
			short events;//待监听的fd对应的监听事件(POLLIN,POLLOUT,POLLERR)
			short revents;//传入给0，满足对应事件的话，返回非0，(POLLIN,POLLOUT,POLLERR)
		}
	nfds:监听数组中实际有效的监听个数
	timeout:超时时长，单位是毫秒
		-1：阻塞等待
		0 ：不阻塞
		>0：指定超时时长
	返回值：
		返回满足对应监听事件的文件描述符的个数
优点：
	自带数组结构，减少循环次数，提高效率
	可以将监听事件和返回事件分离
	可以拓展监听上限，超出1024限制
缺点：
	不能跨平台，只在类UNIX中使用
	无法直接定位满足监听事件的文件描述符，需要循环
-----------------优于select的epoll------------------------------------------------------
epoll服务器端实现所需要的三个函数：
	epoll_create:创建保存epoll文件描述符的空间
	epoll_ctl:向空间注册或注销文件描述符
	epoll_wait:与select函数类似，等待文件描述符发生变化
	epoll将发生变化的文件描述符单独集中到一起struct epoll_event
	struct epoll_event
	{
		__uint32_t		events;
		epoll_data_t 	data;
	}
	typedef union epoll_data
	{
		void 	* 	ptr;
		int 		fd;
		__uint32_t 	u32;
		__uint64_t	u64;
	}epoll_data_t
	声明足够大的epoll_event结构体数组传递给epoll_wait函数时，发生变化的文件描述符信息
		被填入该数组，因此无需像select函数那样针对所有描述符进行循环
	int epoll_create(int size);
		-- //返回epoll文件描述符，失败返回-1
		-- size：epoll实例的大小，仅供操作系统参考
	在epoll例程内部注册监视对象文件描述符
	int epoll_ctl(int epfd,int op,int fd,struct epoll_event * event);
		-- //返回0，失败返回-1
		-- epfd:用于注册监视对象的epoll例程的文件描述符
		-- op:用于指定监视对象的添加、删除或更改等操作
		-- fd:需要注册的监视对象文件描述符
		-- event:监视对象的事件类型
	例1：epoll_ctl(A,EPOLL_CTL_ADD,B,C);
	//epoll例程A中注册文件描述符B，主要目的是监视参数C中的事件
	例2：epoll_ctl(A,EPOLL_CTL_DEL,B,NULL);
	//从epoll例程A中删除文件描述符B
	EPOLL_CTL_MOD:更改注册的文件描述符的关注事件发生情况
	event.events=EPOLLIN;//发生需要读取数据的情况时
	event.data.fd=sockfd;
	epoll_ctl(epfd,EPOLL_CTL_ADD,sockfd,&event);//将描述符注册到例程中，并在相应情况下
		产生相应事件
	int epoll_wait(int epfd,struct epoll_event * events,int maxevents,int timeout);
		-- //返回文件描述符，失败时返回-1
		-- epfd:表示事件发生监视范围的epoll例程的文件描述符
		-- events:保存发生事件的文件描述符集合的结构体地址值
		-- maxevents:第二个参数中可以保存的最大事件数
		-- timeout:以1/1000秒为单位的等待时间，传递-1时一直等待直到发生事件
	第二个参数需要动态分配
ET：边沿触发
	epoll的高速模式，需要使用非阻塞。
	需要将监听的文件描述符设置非阻塞标志。
listenfd需要非阻塞：
	我们一般使用IO复用来实现并发模型，如果我们默认监听套接字为阻塞模式，假设一种场景如下：
	客户通过connect向TCP服务器发起三次握手
	三次握手完成后，触发TCP服务器监听套接字的可读事件，IO复用返回（select、poll、epoll_wait）
	然后客户通过RST报文取消连接
	TCP服务器调用accept接受连接，此时发现内核已连接队列为空（因为唯一的连接已被客户端取消）
	程序阻塞在accept调用，无法响应其它已连接套接字的事件
	为了防止出现上面的场景，我们需要把监听套接字设置为非阻塞
epoll优点：
	无需编写以监视状态变化为目的的针对所有文件描述符的循环语句
	调用对应于select函数的epoll_wait函数时无需每次传递监视对象信息
	可以显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU的利用率!!!
	可以突破1024文件描述符
	提供了两种触发模式：边沿触发、水平触发(默认)
epoll缺点：
	不能跨平台，只支持linux，连unix都不支持
-------------------epoll 反应堆模型--------------------------------------------------
epoll + ET + 非阻塞 + void* ptr(event.data.ptr)
反应堆模式：
	反应堆是一种事件处理的设计模式。异步的收取消息。将不同的消息绑定到不同的回调函数上
反应堆模式的优缺点：
缺点：
    Reactor模式增加了一定的复杂性。
    Reactor模式需要底层的同步事件多路分配器的支持。
    Reactor模式在IO读写数据时还是在同一个线程中实现的。
优点
    1. 响应快，不必为单个同步时间所阻塞，虽然Reactor本身依然是同步的；
    2. 编程相对简单，可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程的切换开销；
    3. 可扩展性，可以方便的通过增加Reactor实例个数来充分利用CPU资源；
    4. 可复用性，reactor框架本身与具体事件处理逻辑无关，具有很高的复用性；
流程：
	监听可读事件(ET) ⇒ 数据到来 ⇒ 触发事件 ⇒ epoll_wait()返回 ⇒
	读取完数据(可读事件回调函数内) ⇒ 将该节点从红黑树上摘下(可读事件回调函数内) ⇒ 设置可写事件和对应可写回调函数(可读事件回调函数内) 
	⇒ 挂上树(可读事件回调函数内) ⇒ 处理数据(可读事件回调函数内)
	⇒ 监听可写事件(ET) ⇒ 对方可写 ⇒ 触发事件 ⇒ epoll_wait()返回 ⇒
	写完数据(可写事件回调函数内) ⇒ 将该节点从红黑树上摘下(可写事件回调函数内) ⇒ 设置可读事件和对应可读回调函数(可写读事件回调函数内) 
	⇒ 挂上树(可写事件回调函数内) ⇒ 处理收尾工作(可写事件回调函数内) ⇒ 直到程序停止前一直这么交替循环
如此频繁的增加删除不是浪费CPU资源吗？
	对于同一个socket而言，完成收发至少占用两个树上的位置。而交替只需要一个。任何一种设计方式都会有浪费CPU资源的时候，
	关键看你浪费得值不值，此处的耗费能否换来更大的收益才是衡量是否浪费的标准，和第二个问题综合来看，这里不算浪费。
为什么要可读以后设置可写，然后一直交替？
	服务器的基本工作无非数据的收发，epoll反应堆模型准从TCP模式，一问一答。服务器收到了数据，再给与回复，是目前绝大多数服务器的情况。
	服务器能收到数据并不是一定能写数据：
   假设一、服务器接收到客户端数据，刚好此时客户端的接收滑动窗口满，我们假设不进行可写事件设置，并且客户端是有意让自己的接收滑动窗口满
	的情况(黑客)。那么，当前服务器将随客户端的状态一直阻塞在可写事件，除非你自己在写数据时设置非阻塞+错误处理
   假设二、客户端在发送完数据后突然由于异常原因停止，这将导致一个FIN发送至服务器，如果服务器不设置可写事件监听，那么在接收数据后
   	写入数据会引发异常SIGPIPE，最终服务器进程终止。
-------------------多线程------------------------------------------------------------
优点：
	线程的创建和上下文切换比进程的创建和上下文切换更快
	线程间交换数据时无需特殊技术
	线程拥有自己的栈空间，共享的数据区和堆区。
	int pthread_create(pthread_t * restrict thread,const pthread_attr_t * restrict attr,
		void * (* start_routine)(void *),void * restrict arg);
		-- //返回0，失败时返回其他值
		-- thread:新建的线程id的地址值
		-- attr:传递线程属性的参数，传递null时，创建默认属性的线程
		-- start_routine:相当于线程的main函数，的函数地址值
		-- arg : 传递第三个函数指针的函数的参数信息的变量地址值
	int pthread_join(pthread_t thread,void ** status);
		-- //返回0，失败返回其他值
		-- thread:该参数值ID的线程终止后才会从该函数返回
		-- status:保存【线程的main函数返回值】的指针变量地址值
线程安全函数：即可重入函数
	函数名称后加_r;
	声明头文件前定义_REENTRANT宏可以自动将非线程安全函数转换为线程安全函数
	或添加编译选项 -D_REENTRANT
线程同步：
	互斥量：
		不允许多个线程同时访问
	创建和销毁互斥量函数：
	int pthread_mutex_init(pthread_mutex_t * mutex,const pthread_mutexattr_t * attr);
	int pthread_mutex_destroy(pthread_mutex_t * mutex);
		-- //返回0，失败时返回其他值
		-- mutex:创建或销毁时传递互斥量的变量地址值
		-- attr:互斥量属性，没有特别指定时传NULL
	加锁和解锁函数：
	int pthread_mutex_lock(pthread_mutex_t * mutex);
	int pthread_mutex_unlock(pthread_mutex_t * mutex);
		-- //返回0，失败时返回其他值
	信号量：
	创建和销毁函数：
	int sem_init(sem_t * sem,int pshared,unsigend int value);
	int sem_destroy(sem_t * sem);
		-- 返回0，失败时返回其他值
		-- sem:传0时只允许一个进程内部使用，其他值时由多个进程共享的信号量
		-- value:制定新创建的信号量初始值
	信号量中相当于互斥量加锁解锁的函数：
	int sem_post(sem_t * sem);
	int sem_wait(sem_t * sem);
		-- //返回0，失败返回其他值
		-- sem:传递保存信号量读取值的变量地址值，传递给sem_post时信号量加一，传递给
			sem_wait时信号量减一
线程销毁：
	调用pthread_join函数
	调用pthread_detach函数
	int pthread_detach(pthread_t thread);
		-- //返回0，失败时返回其他值
死锁：
	互斥性
	持有
	不可剥夺
	环形等待
------------------libevent库----------------------------------------------------------------
两个稳定版本：
	1.4：比较古老、源码简单、适合学习
	2.0：比较新、建议直接使用2.0
优点：
	开源、精简、跨平台，统一事件源、线程安全、基于反应堆模式
安装：
	./configure       -- 检查安装环境、生成makefile
	make              -- 生成.o和可执行文件
	sudo make install -- 将必要的资源放在系统指定目录
使用：
	编译加上 -levent 选项
特性：
	基于事件的异步通信模式
	依赖回调机制
框架：
	1、创建event_base 
		struct event_base* = event_base_new(void);
	2、创建event事件
		常规事件：
			struct event *event_new(struct event_base *, evutil_socket_t, short, event_callback_fn, void *);
				-- base
				-- 绑定到事件的文件描述符
				-- 对应的事件 EV_WRITE|EV_READ|EV_PERSIST
				-- 事件发生时回调的函数
				-- 回调函数参数
				-- 返回成功创建的事件
		bufferevent://专用于socket网络通信
			struct bufferevent *bufferevent_socket_new(struct event_base *base, evutil_socket_t fd, int options);
				base:event_base
				fd:套接字
				options:
					常用：BEV_OPT_CLOSE_ON_FREE//在释放bufferevent时，把底层的套接字也关闭
	3、将事件添加到base上
		常规：
			int event_add(struct event *ev, const struct timeval *timeout);
				base:event_base
				timeout:超时时间，一般设置为NULL
		网络通信：
			struct evconnlistener *evconnlistener_new_bind(struct event_base *base,evconnlistener_cb cb, void *ptr, unsigned flags,
		                                               int backlog,const struct sockaddr *sa, int socklen);//将监听事件放入base
			void bufferevent_setcb(struct bufferevent *bufev,bufferevent_data_cb readcb, bufferevent_data_cb writecb,
						  bufferevent_event_cb eventcb, void *cbarg);//给读写缓冲区设置回调函数
				bufev：bufferevent_socket_new()返回值
				readcb：设置bufferevent读缓冲的回调，在回调函数中使用bufferevent_read读数据
				writecb：设置bufferevent写缓冲的回调，bufferevent_write写完数据会触发该回调函数
				eventcb：事件回调，void (*bufferevent_event_cb)(struct bufferevent *bev, short what, void *ctx);
						一般传递NULL
				cbarg：上述回调函数使用的参数
		启用、禁用缓冲区：
			int bufferevent_enable(struct bufferevent *bufev, short event);
			int bufferevent_disable(struct bufferevent *bufev, short event);
				默认：新建的bufferevent写缓冲是enable的，读缓冲是disable的。
				bufev:bufferevent_socket_new()返回值
				events:EV_READ、EV_WRITE

	4、循环监听事件
		int event_base_dispatch(struct event_base *);
	5、释放event_base
		void event_base_free(struct event_base *);
循环：
	只有event_new中指定了 EV_PERSIST 才持续触发，否则只触发一次，就跳出循环
	通常：EV_WRITE|EV_PERSIST  、   EV_READ|EV_PERSIST
dispatch退出：
	int event_base_loopexit(struct event_base *, const struct timeval *);
		-- 在指定时间后退出
	int event_base_loopbreak(struct event_base *);
		-- 立即退出循环
查看支持哪些多路IO
	const char **event_get_supported_methods(void);
查看当前用的多路IO
	const char *event_base_get_method(const struct event_base *);
查看fork后子进程使用的event_base
	int event_reinit(struct event_base *base);
添加事件到event_base
	int event_add(struct event *ev, const struct timeval *timeout);
将事件从event_base摘下
	int event_del(struct event *);
将事件释放：
	void event_free(struct event *);
libevent实现TCP通信：
	客户端：
		socket()、connect()
		int bufferevent_socket_connect(struct bufferevent *, const struct sockaddr *, int);
	服务器：
		1、创建event_base
		2、创建bufferevent对象
		3、设置bufferevent对象的读、写、事件的回调函数
		
		//socket()、bind()、listen()、accept()
		struct evconnlistener *evconnlistener_new_bind(struct event_base *base,
    			evconnlistener_cb cb, void *ptr, unsigned flags, int backlog,
    			const struct sockaddr *sa, int socklen);
    		base:event_base
    		cb:监听回调函数
    		ptr:回调函数的参数
    		flags:可识别的标识
    				LEV_OPT_CLOSE_ON_FREE:释放bufferevent时关闭底层传输端口，这将关闭底层套接字，释放底层bufferevent等
    				LEV_OPT_REUSEABLE:端口复用
    		backlog:listen的第二个参数，传-1表示使用默认最大值
    		sa:服务器端IP和端口信息结构体
    		socklen:结构体长度
    		返回：成功创建的监听器
    	void (*evconnlistener_cb)(struct evconnlistener *bev, evutil_socket_t fd, struct sockaddr * addr, int socklen len, void *arg)
    		监听回调函数，有框架自动调用，在该函数中添加客户端套接字的事件监听
    		bev:监听器
    		fd:acctept返回的客户端连接的套接字
    		addr:客户端的地址结构
    		len:客户端的地址长度
    		arg:event_base

------------------HTTP----------------------------------------------------------------
HTTP服务器端：即Web服务器端
	基于HTTP协议，将网页对应文件传输给客户端的服务器端
HTTP协议：
	以超文本传输为目的而设计的应用层协议，是基于TCP/IP实现的协议
无状态的Stateless协议：
	客户端数据请求-》服务端数据请求-》服务端断开连接
请求消息的结构：
	1.请求行
		--GET:用于请求数据
		--POST:用于传输数据
	2.消息头
		--包含发送请求的浏览器信息、用户认证信息等关于HTTP消息的附加信息
	3.空行
		--分开消息头和消息体，使之不会发生边界问题
	4.消息体
		--装有客户端向服务器端传输的数据
响应消息的结构：
	1.状态行
		--含有关于客户端请求的处理结果
	2.消息头
		--含有传输的数据类型和长度等信息
	3.空行
		--
	4.消息体
		--发送的客户端请求的文件数据
		
		
		
拥塞控制：
	SWND：发送窗口(向网络一次连续写入的数据量)，限定了发送端连续发送的TCP报文数量
	SMSS：TCP报文数据段最大长度
	RWND：接收通告窗口
	CWND：拥塞窗口		
		
		
		
		
		
		
		
		
		
		

















	
	
	
	
	
	
	
	
	
	
	
	
	
	
	