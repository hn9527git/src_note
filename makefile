makefile杂记
三个自动变量：
$@，$^，$<代表的意义分别是： 
	$@ 在规则命令中代表当前规则的目标文件，
	$^ 在规则命令中代表所有的依赖文件，
	$< 在规则命令中代表第一个依赖文件。如果在模式规则中，将依赖依次取出，套用规则，依次生成目标文件
函数：
	src = $(wildcard *.c)//通配函数，使$(src)等于所有的以.c结尾的文件组成的列表
	obj = $(patsubst %.c,%.o,$(src))//将src中的.c结尾文件替换为.o结尾
模式规则：//新增cpp文件不必修改makefile
	%.o:*.cpp
		g++ -c $< -o $@
静态模式规则：//如果有多个模式规则，指定$(obj)依赖于哪个模式规则
	$(obj):%.o:cpp
		g++ -c $< -o $@
target...:依赖文件//终极目标：所需依赖目标文件名称，或者使用all也行
	命令行
	...//依赖文件生成过程
.PHONY:clean all//将clean或其他目标声明为伪目标，避免磁盘上存在一个clean或其他同名文件时，clean命令行无法执行
	clean:
		-rm *.o//加上-，表示忽略rm命令的执行错误信息
	· 每个命令行必须以【tab】字符开始
	· make后删除中间文件只需执行 make clean
make
	根据Makefile文件编译源代码、连接、生成目标文件、可执行文件。
make clean
	清除上次的make命令所产生的object文件（后缀为“.o”的文件）及可执行文件。
	make clean -n
	仅仅测试该指令，模拟执行，并不实际删除
make install
	将编译成功的可执行文件安装到系统目录中，一般为/usr/local/bin目录。
